

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Sat Jan 15 19:44:31 2022

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	16F1829
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	intentry,global,class=CODE,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,inline,delta=2
    23                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text13,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text14,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text15,local,class=CODE,merge=1,delta=2
    27                           	psect	text16,local,class=CODE,merge=1,delta=2
    28                           	psect	text17,local,class=CODE,merge=1,delta=2
    29                           	psect	text18,local,class=CODE,merge=1,delta=2
    30                           	psect	text19,local,class=CODE,merge=1,delta=2,group=1
    31                           	psect	text20,local,class=CODE,merge=1,delta=2
    32                           	psect	text21,local,class=CODE,merge=1,delta=2,group=1
    33                           	psect	text22,local,class=CODE,merge=1,delta=2
    34                           	psect	text23,local,class=CODE,merge=1,delta=2
    35                           	psect	text24,local,class=CODE,merge=1,delta=2,group=1
    36                           	psect	text25,local,class=CODE,merge=1,delta=2,group=1
    37                           	psect	text26,local,class=CODE,merge=1,delta=2
    38                           	psect	text27,local,class=CODE,merge=1,delta=2
    39                           	psect	text28,local,class=CODE,merge=1,delta=2
    40                           	psect	text29,local,class=CODE,merge=1,delta=2
    41                           	psect	text30,local,class=CODE,merge=1,delta=2
    42                           	psect	text31,local,class=CODE,merge=1,delta=2
    43                           	psect	text32,local,class=CODE,merge=1,delta=2
    44                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    45                           	dabs	1,0x7E,2
    46  0000                     
    47                           ; Version 2.20
    48                           ; Generated 12/02/2020 GMT
    49                           ; 
    50                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    51                           ; All rights reserved.
    52                           ; 
    53                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    54                           ; 
    55                           ; Redistribution and use in source and binary forms, with or without modification, are
    56                           ; permitted provided that the following conditions are met:
    57                           ; 
    58                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    59                           ;        conditions and the following disclaimer.
    60                           ; 
    61                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    62                           ;        of conditions and the following disclaimer in the documentation and/or other
    63                           ;        materials provided with the distribution.
    64                           ; 
    65                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    66                           ;        software without specific prior written permission.
    67                           ; 
    68                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    69                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    70                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    71                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    72                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    73                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    74                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    75                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    76                           ; 
    77                           ; 
    78                           ; Code-generator required, PIC16F1829 Definitions
    79                           ; 
    80                           ; SFR Addresses
    81  0000                     	;# 
    82  0001                     	;# 
    83  0002                     	;# 
    84  0003                     	;# 
    85  0004                     	;# 
    86  0005                     	;# 
    87  0006                     	;# 
    88  0007                     	;# 
    89  0008                     	;# 
    90  0009                     	;# 
    91  000A                     	;# 
    92  000B                     	;# 
    93  000C                     	;# 
    94  000D                     	;# 
    95  000E                     	;# 
    96  0011                     	;# 
    97  0012                     	;# 
    98  0013                     	;# 
    99  0014                     	;# 
   100  0015                     	;# 
   101  0016                     	;# 
   102  0016                     	;# 
   103  0017                     	;# 
   104  0018                     	;# 
   105  0019                     	;# 
   106  001A                     	;# 
   107  001B                     	;# 
   108  001C                     	;# 
   109  001E                     	;# 
   110  001F                     	;# 
   111  008C                     	;# 
   112  008D                     	;# 
   113  008E                     	;# 
   114  0091                     	;# 
   115  0092                     	;# 
   116  0093                     	;# 
   117  0094                     	;# 
   118  0095                     	;# 
   119  0096                     	;# 
   120  0097                     	;# 
   121  0098                     	;# 
   122  0099                     	;# 
   123  009A                     	;# 
   124  009B                     	;# 
   125  009B                     	;# 
   126  009C                     	;# 
   127  009D                     	;# 
   128  009E                     	;# 
   129  010C                     	;# 
   130  010D                     	;# 
   131  010E                     	;# 
   132  0111                     	;# 
   133  0112                     	;# 
   134  0113                     	;# 
   135  0114                     	;# 
   136  0115                     	;# 
   137  0116                     	;# 
   138  0117                     	;# 
   139  0118                     	;# 
   140  0119                     	;# 
   141  011A                     	;# 
   142  011B                     	;# 
   143  011D                     	;# 
   144  011E                     	;# 
   145  018C                     	;# 
   146  018D                     	;# 
   147  018E                     	;# 
   148  0191                     	;# 
   149  0191                     	;# 
   150  0192                     	;# 
   151  0193                     	;# 
   152  0193                     	;# 
   153  0193                     	;# 
   154  0194                     	;# 
   155  0195                     	;# 
   156  0196                     	;# 
   157  0199                     	;# 
   158  019A                     	;# 
   159  019B                     	;# 
   160  019B                     	;# 
   161  019C                     	;# 
   162  019D                     	;# 
   163  019E                     	;# 
   164  019F                     	;# 
   165  020C                     	;# 
   166  020D                     	;# 
   167  020E                     	;# 
   168  0211                     	;# 
   169  0211                     	;# 
   170  0212                     	;# 
   171  0212                     	;# 
   172  0213                     	;# 
   173  0213                     	;# 
   174  0214                     	;# 
   175  0214                     	;# 
   176  0215                     	;# 
   177  0215                     	;# 
   178  0215                     	;# 
   179  0216                     	;# 
   180  0216                     	;# 
   181  0217                     	;# 
   182  0217                     	;# 
   183  0219                     	;# 
   184  021A                     	;# 
   185  021B                     	;# 
   186  021C                     	;# 
   187  021D                     	;# 
   188  021E                     	;# 
   189  021F                     	;# 
   190  0291                     	;# 
   191  0291                     	;# 
   192  0292                     	;# 
   193  0293                     	;# 
   194  0294                     	;# 
   195  0295                     	;# 
   196  0295                     	;# 
   197  0296                     	;# 
   198  0298                     	;# 
   199  0298                     	;# 
   200  0299                     	;# 
   201  029A                     	;# 
   202  029B                     	;# 
   203  029C                     	;# 
   204  029D                     	;# 
   205  029E                     	;# 
   206  0311                     	;# 
   207  0311                     	;# 
   208  0312                     	;# 
   209  0313                     	;# 
   210  0318                     	;# 
   211  0318                     	;# 
   212  0319                     	;# 
   213  031A                     	;# 
   214  038C                     	;# 
   215  038D                     	;# 
   216  038E                     	;# 
   217  0391                     	;# 
   218  0392                     	;# 
   219  0393                     	;# 
   220  0394                     	;# 
   221  0395                     	;# 
   222  0396                     	;# 
   223  039A                     	;# 
   224  039C                     	;# 
   225  039D                     	;# 
   226  039E                     	;# 
   227  039F                     	;# 
   228  0415                     	;# 
   229  0416                     	;# 
   230  0417                     	;# 
   231  041C                     	;# 
   232  041D                     	;# 
   233  041E                     	;# 
   234  0FE4                     	;# 
   235  0FE5                     	;# 
   236  0FE6                     	;# 
   237  0FE7                     	;# 
   238  0FE8                     	;# 
   239  0FE9                     	;# 
   240  0FEA                     	;# 
   241  0FEB                     	;# 
   242  0FED                     	;# 
   243  0FEE                     	;# 
   244  0FEF                     	;# 
   245  0000                     	;# 
   246  0001                     	;# 
   247  0002                     	;# 
   248  0003                     	;# 
   249  0004                     	;# 
   250  0005                     	;# 
   251  0006                     	;# 
   252  0007                     	;# 
   253  0008                     	;# 
   254  0009                     	;# 
   255  000A                     	;# 
   256  000B                     	;# 
   257  000C                     	;# 
   258  000D                     	;# 
   259  000E                     	;# 
   260  0011                     	;# 
   261  0012                     	;# 
   262  0013                     	;# 
   263  0014                     	;# 
   264  0015                     	;# 
   265  0016                     	;# 
   266  0016                     	;# 
   267  0017                     	;# 
   268  0018                     	;# 
   269  0019                     	;# 
   270  001A                     	;# 
   271  001B                     	;# 
   272  001C                     	;# 
   273  001E                     	;# 
   274  001F                     	;# 
   275  008C                     	;# 
   276  008D                     	;# 
   277  008E                     	;# 
   278  0091                     	;# 
   279  0092                     	;# 
   280  0093                     	;# 
   281  0094                     	;# 
   282  0095                     	;# 
   283  0096                     	;# 
   284  0097                     	;# 
   285  0098                     	;# 
   286  0099                     	;# 
   287  009A                     	;# 
   288  009B                     	;# 
   289  009B                     	;# 
   290  009C                     	;# 
   291  009D                     	;# 
   292  009E                     	;# 
   293  010C                     	;# 
   294  010D                     	;# 
   295  010E                     	;# 
   296  0111                     	;# 
   297  0112                     	;# 
   298  0113                     	;# 
   299  0114                     	;# 
   300  0115                     	;# 
   301  0116                     	;# 
   302  0117                     	;# 
   303  0118                     	;# 
   304  0119                     	;# 
   305  011A                     	;# 
   306  011B                     	;# 
   307  011D                     	;# 
   308  011E                     	;# 
   309  018C                     	;# 
   310  018D                     	;# 
   311  018E                     	;# 
   312  0191                     	;# 
   313  0191                     	;# 
   314  0192                     	;# 
   315  0193                     	;# 
   316  0193                     	;# 
   317  0193                     	;# 
   318  0194                     	;# 
   319  0195                     	;# 
   320  0196                     	;# 
   321  0199                     	;# 
   322  019A                     	;# 
   323  019B                     	;# 
   324  019B                     	;# 
   325  019C                     	;# 
   326  019D                     	;# 
   327  019E                     	;# 
   328  019F                     	;# 
   329  020C                     	;# 
   330  020D                     	;# 
   331  020E                     	;# 
   332  0211                     	;# 
   333  0211                     	;# 
   334  0212                     	;# 
   335  0212                     	;# 
   336  0213                     	;# 
   337  0213                     	;# 
   338  0214                     	;# 
   339  0214                     	;# 
   340  0215                     	;# 
   341  0215                     	;# 
   342  0215                     	;# 
   343  0216                     	;# 
   344  0216                     	;# 
   345  0217                     	;# 
   346  0217                     	;# 
   347  0219                     	;# 
   348  021A                     	;# 
   349  021B                     	;# 
   350  021C                     	;# 
   351  021D                     	;# 
   352  021E                     	;# 
   353  021F                     	;# 
   354  0291                     	;# 
   355  0291                     	;# 
   356  0292                     	;# 
   357  0293                     	;# 
   358  0294                     	;# 
   359  0295                     	;# 
   360  0295                     	;# 
   361  0296                     	;# 
   362  0298                     	;# 
   363  0298                     	;# 
   364  0299                     	;# 
   365  029A                     	;# 
   366  029B                     	;# 
   367  029C                     	;# 
   368  029D                     	;# 
   369  029E                     	;# 
   370  0311                     	;# 
   371  0311                     	;# 
   372  0312                     	;# 
   373  0313                     	;# 
   374  0318                     	;# 
   375  0318                     	;# 
   376  0319                     	;# 
   377  031A                     	;# 
   378  038C                     	;# 
   379  038D                     	;# 
   380  038E                     	;# 
   381  0391                     	;# 
   382  0392                     	;# 
   383  0393                     	;# 
   384  0394                     	;# 
   385  0395                     	;# 
   386  0396                     	;# 
   387  039A                     	;# 
   388  039C                     	;# 
   389  039D                     	;# 
   390  039E                     	;# 
   391  039F                     	;# 
   392  0415                     	;# 
   393  0416                     	;# 
   394  0417                     	;# 
   395  041C                     	;# 
   396  041D                     	;# 
   397  041E                     	;# 
   398  0FE4                     	;# 
   399  0FE5                     	;# 
   400  0FE6                     	;# 
   401  0FE7                     	;# 
   402  0FE8                     	;# 
   403  0FE9                     	;# 
   404  0FEA                     	;# 
   405  0FEB                     	;# 
   406  0FED                     	;# 
   407  0FEE                     	;# 
   408  0FEF                     	;# 
   409  0000                     	;# 
   410  0001                     	;# 
   411  0002                     	;# 
   412  0003                     	;# 
   413  0004                     	;# 
   414  0005                     	;# 
   415  0006                     	;# 
   416  0007                     	;# 
   417  0008                     	;# 
   418  0009                     	;# 
   419  000A                     	;# 
   420  000B                     	;# 
   421  000C                     	;# 
   422  000D                     	;# 
   423  000E                     	;# 
   424  0011                     	;# 
   425  0012                     	;# 
   426  0013                     	;# 
   427  0014                     	;# 
   428  0015                     	;# 
   429  0016                     	;# 
   430  0016                     	;# 
   431  0017                     	;# 
   432  0018                     	;# 
   433  0019                     	;# 
   434  001A                     	;# 
   435  001B                     	;# 
   436  001C                     	;# 
   437  001E                     	;# 
   438  001F                     	;# 
   439  008C                     	;# 
   440  008D                     	;# 
   441  008E                     	;# 
   442  0091                     	;# 
   443  0092                     	;# 
   444  0093                     	;# 
   445  0094                     	;# 
   446  0095                     	;# 
   447  0096                     	;# 
   448  0097                     	;# 
   449  0098                     	;# 
   450  0099                     	;# 
   451  009A                     	;# 
   452  009B                     	;# 
   453  009B                     	;# 
   454  009C                     	;# 
   455  009D                     	;# 
   456  009E                     	;# 
   457  010C                     	;# 
   458  010D                     	;# 
   459  010E                     	;# 
   460  0111                     	;# 
   461  0112                     	;# 
   462  0113                     	;# 
   463  0114                     	;# 
   464  0115                     	;# 
   465  0116                     	;# 
   466  0117                     	;# 
   467  0118                     	;# 
   468  0119                     	;# 
   469  011A                     	;# 
   470  011B                     	;# 
   471  011D                     	;# 
   472  011E                     	;# 
   473  018C                     	;# 
   474  018D                     	;# 
   475  018E                     	;# 
   476  0191                     	;# 
   477  0191                     	;# 
   478  0192                     	;# 
   479  0193                     	;# 
   480  0193                     	;# 
   481  0193                     	;# 
   482  0194                     	;# 
   483  0195                     	;# 
   484  0196                     	;# 
   485  0199                     	;# 
   486  019A                     	;# 
   487  019B                     	;# 
   488  019B                     	;# 
   489  019C                     	;# 
   490  019D                     	;# 
   491  019E                     	;# 
   492  019F                     	;# 
   493  020C                     	;# 
   494  020D                     	;# 
   495  020E                     	;# 
   496  0211                     	;# 
   497  0211                     	;# 
   498  0212                     	;# 
   499  0212                     	;# 
   500  0213                     	;# 
   501  0213                     	;# 
   502  0214                     	;# 
   503  0214                     	;# 
   504  0215                     	;# 
   505  0215                     	;# 
   506  0215                     	;# 
   507  0216                     	;# 
   508  0216                     	;# 
   509  0217                     	;# 
   510  0217                     	;# 
   511  0219                     	;# 
   512  021A                     	;# 
   513  021B                     	;# 
   514  021C                     	;# 
   515  021D                     	;# 
   516  021E                     	;# 
   517  021F                     	;# 
   518  0291                     	;# 
   519  0291                     	;# 
   520  0292                     	;# 
   521  0293                     	;# 
   522  0294                     	;# 
   523  0295                     	;# 
   524  0295                     	;# 
   525  0296                     	;# 
   526  0298                     	;# 
   527  0298                     	;# 
   528  0299                     	;# 
   529  029A                     	;# 
   530  029B                     	;# 
   531  029C                     	;# 
   532  029D                     	;# 
   533  029E                     	;# 
   534  0311                     	;# 
   535  0311                     	;# 
   536  0312                     	;# 
   537  0313                     	;# 
   538  0318                     	;# 
   539  0318                     	;# 
   540  0319                     	;# 
   541  031A                     	;# 
   542  038C                     	;# 
   543  038D                     	;# 
   544  038E                     	;# 
   545  0391                     	;# 
   546  0392                     	;# 
   547  0393                     	;# 
   548  0394                     	;# 
   549  0395                     	;# 
   550  0396                     	;# 
   551  039A                     	;# 
   552  039C                     	;# 
   553  039D                     	;# 
   554  039E                     	;# 
   555  039F                     	;# 
   556  0415                     	;# 
   557  0416                     	;# 
   558  0417                     	;# 
   559  041C                     	;# 
   560  041D                     	;# 
   561  041E                     	;# 
   562  0FE4                     	;# 
   563  0FE5                     	;# 
   564  0FE6                     	;# 
   565  0FE7                     	;# 
   566  0FE8                     	;# 
   567  0FE9                     	;# 
   568  0FEA                     	;# 
   569  0FEB                     	;# 
   570  0FED                     	;# 
   571  0FEE                     	;# 
   572  0FEF                     	;# 
   573                           
   574                           	psect	idataBANK0
   575  061C                     __pidataBANK0:
   576                           
   577                           ;initializer for display2dgtChar@F2598
   578  061C  3420               	retlw	32
   579  061D  3420               	retlw	32
   580  061E  3400               	retlw	0
   581  000D                     _PORTBbits	set	13
   582  0011                     _PIR1bits	set	17
   583  001C                     _T2CONbits	set	28
   584  001B                     _PR2	set	27
   585  000B                     _INTCONbits	set	11
   586  008D                     _TRISBbits	set	141
   587  0091                     _PIE1bits	set	145
   588  008E                     _TRISCbits	set	142
   589  0099                     _OSCCON	set	153
   590  010D                     _LATBbits	set	269
   591  010E                     _LATCbits	set	270
   592  018D                     _ANSELBbits	set	397
   593  0396                     _IOCBFbits	set	918
   594  0394                     _IOCBPbits	set	916
   595                           
   596                           	psect	cinit
   597  007F                     start_initialization:	
   598                           ; #config settings
   599                           
   600  007F                     __initialization:
   601                           
   602                           ; Initialize objects allocated to BANK0
   603  007F  3186  261C  3180   	fcall	__pidataBANK0	;fetch initializer
   604  0082  00CF               	movwf	__pdataBANK0& (0+127)
   605  0083  3186  261D  3180   	fcall	__pidataBANK0+1	;fetch initializer
   606  0086  00D0               	movwf	(__pdataBANK0+1)& (0+127)
   607  0087  3186  261E  3180   	fcall	__pidataBANK0+2	;fetch initializer
   608  008A  00D1               	movwf	(__pdataBANK0+2)& (0+127)
   609                           
   610                           ; Clear objects allocated to BANK0
   611  008B  01C3               	clrf	__pbssBANK0& (0+127)
   612  008C  01C4               	clrf	(__pbssBANK0+1)& (0+127)
   613  008D  01C5               	clrf	(__pbssBANK0+2)& (0+127)
   614  008E  01C6               	clrf	(__pbssBANK0+3)& (0+127)
   615  008F  01C7               	clrf	(__pbssBANK0+4)& (0+127)
   616  0090  01C8               	clrf	(__pbssBANK0+5)& (0+127)
   617  0091  01C9               	clrf	(__pbssBANK0+6)& (0+127)
   618  0092  01CA               	clrf	(__pbssBANK0+7)& (0+127)
   619  0093  01CB               	clrf	(__pbssBANK0+8)& (0+127)
   620  0094  01CC               	clrf	(__pbssBANK0+9)& (0+127)
   621  0095  01CD               	clrf	(__pbssBANK0+10)& (0+127)
   622  0096  01CE               	clrf	(__pbssBANK0+11)& (0+127)
   623  0097                     end_of_initialization:	
   624                           ;End of C runtime variable initialization code
   625                           
   626  0097                     __end_of__initialization:
   627  0097  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
   628  0098  0020               	movlb	0
   629  0099  3184  2CF9         	ljmp	_main	;jump to C main() function
   630                           
   631                           	psect	bssBANK0
   632  0043                     __pbssBANK0:
   633  0043                     _currentSeconds:
   634  0043                     	ds	4
   635  0047                     _configuredSeconds:
   636  0047                     	ds	4
   637  004B                     _currentPos:
   638  004B                     	ds	1
   639  004C                     _currentMode:
   640  004C                     	ds	1
   641  004D                     _secondCounter:
   642  004D                     	ds	1
   643  004E                     _timerCounter:
   644  004E                     	ds	1
   645                           
   646                           	psect	dataBANK0
   647  004F                     __pdataBANK0:
   648  004F                     display2dgtChar@F2598:
   649  004F                     	ds	3
   650                           
   651                           	psect	cstackBANK1
   652  00A0                     __pcstackBANK1:
   653  00A0                     writeFullByte@data:
   654                           
   655                           ; 1 bytes @ 0x0
   656  00A0                     	ds	1
   657  00A1                     command@cmd:
   658                           
   659                           ; 1 bytes @ 0x1
   660  00A1                     	ds	1
   661  00A2                     ??_clearDisplay:
   662                           
   663                           ; 1 bytes @ 0x2
   664  00A2                     	ds	1
   665  00A3                     ??_initDisplay:
   666                           
   667                           ; 1 bytes @ 0x3
   668  00A3                     	ds	2
   669                           
   670                           	psect	cstackCOMMON
   671  0070                     __pcstackCOMMON:
   672  0070                     ?_addText:
   673  0070                     ?_setCursor:	
   674                           ; 1 bytes @ 0x0
   675                           
   676  0070                     ?_addChar:	
   677                           ; 1 bytes @ 0x0
   678                           
   679  0070                     ?_initDisplay:	
   680                           ; 1 bytes @ 0x0
   681                           
   682  0070                     ?_setPinOutputs:	
   683                           ; 1 bytes @ 0x0
   684                           
   685  0070                     ?_enable4BitMode:	
   686                           ; 1 bytes @ 0x0
   687                           
   688  0070                     ?_command:	
   689                           ; 1 bytes @ 0x0
   690                           
   691  0070                     ?_clearDisplay:	
   692                           ; 1 bytes @ 0x0
   693                           
   694  0070                     ?_text:	
   695                           ; 1 bytes @ 0x0
   696                           
   697  0070                     ?_writeHalfByte:	
   698                           ; 1 bytes @ 0x0
   699                           
   700  0070                     ?_pulseEnable:	
   701                           ; 1 bytes @ 0x0
   702                           
   703  0070                     ?_display2dgtChar:	
   704                           ; 1 bytes @ 0x0
   705                           
   706  0070                     ?_main:	
   707                           ; 1 bytes @ 0x0
   708                           
   709  0070                     ?_updateDisplay:	
   710                           ; 1 bytes @ 0x0
   711                           
   712  0070                     ?_everySecond:	
   713                           ; 1 bytes @ 0x0
   714                           
   715  0070                     ?_onReset:	
   716                           ; 1 bytes @ 0x0
   717                           
   718  0070                     ?_onStartBut:	
   719                           ; 1 bytes @ 0x0
   720                           
   721  0070                     ?_onSecBut:	
   722                           ; 1 bytes @ 0x0
   723                           
   724  0070                     ?_onMinBut:	
   725                           ; 1 bytes @ 0x0
   726                           
   727  0070                     ?_isr_routine:	
   728                           ; 1 bytes @ 0x0
   729                           
   730  0070                     ?i1_writeHalfByte:	
   731                           ; 1 bytes @ 0x0
   732                           
   733  0070                     ??i1_writeHalfByte:	
   734                           ; 1 bytes @ 0x0
   735                           
   736  0070                     ?i1_command:	
   737                           ; 1 bytes @ 0x0
   738                           
   739  0070                     ?i1_pulseEnable:	
   740                           ; 1 bytes @ 0x0
   741                           
   742  0070                     ??i1_pulseEnable:	
   743                           ; 1 bytes @ 0x0
   744                           
   745  0070                     ?___awdiv:	
   746                           ; 1 bytes @ 0x0
   747                           
   748  0070                     ?___awmod:	
   749                           ; 2 bytes @ 0x0
   750                           
   751  0070                     ?___lldiv:	
   752                           ; 2 bytes @ 0x0
   753                           
   754  0070                     ?___llmod:	
   755                           ; 4 bytes @ 0x0
   756                           
   757  0070                     ___awdiv@divisor:	
   758                           ; 4 bytes @ 0x0
   759                           
   760  0070                     ___awmod@divisor:	
   761                           ; 2 bytes @ 0x0
   762                           
   763  0070                     ___lldiv@divisor:	
   764                           ; 2 bytes @ 0x0
   765                           
   766  0070                     ___llmod@divisor:	
   767                           ; 4 bytes @ 0x0
   768                           
   769                           
   770                           ; 4 bytes @ 0x0
   771  0070                     	ds	2
   772  0072                     i1writeHalfByte@data:
   773  0072                     ___awdiv@dividend:	
   774                           ; 1 bytes @ 0x2
   775                           
   776  0072                     ___awmod@dividend:	
   777                           ; 2 bytes @ 0x2
   778                           
   779                           
   780                           ; 2 bytes @ 0x2
   781  0072                     	ds	1
   782  0073                     ?i1_writeFullByte:
   783  0073                     i1writeFullByte@mode:	
   784                           ; 1 bytes @ 0x3
   785                           
   786                           
   787                           ; 1 bytes @ 0x3
   788  0073                     	ds	1
   789  0074                     ??___awdiv:
   790  0074                     ??___awmod:	
   791                           ; 1 bytes @ 0x4
   792                           
   793  0074                     ??i1_writeFullByte:	
   794                           ; 1 bytes @ 0x4
   795                           
   796  0074                     ___lldiv@dividend:	
   797                           ; 1 bytes @ 0x4
   798                           
   799  0074                     ___llmod@dividend:	
   800                           ; 4 bytes @ 0x4
   801                           
   802                           
   803                           ; 4 bytes @ 0x4
   804  0074                     	ds	1
   805  0075                     ___awdiv@counter:
   806  0075                     ___awmod@counter:	
   807                           ; 1 bytes @ 0x5
   808                           
   809  0075                     i1writeFullByte@data:	
   810                           ; 1 bytes @ 0x5
   811                           
   812                           
   813                           ; 1 bytes @ 0x5
   814  0075                     	ds	1
   815  0076                     ??i1_command:
   816  0076                     ___awdiv@sign:	
   817                           ; 1 bytes @ 0x6
   818                           
   819  0076                     ___awmod@sign:	
   820                           ; 1 bytes @ 0x6
   821                           
   822  0076                     i1command@cmd:	
   823                           ; 1 bytes @ 0x6
   824                           
   825                           
   826                           ; 1 bytes @ 0x6
   827  0076                     	ds	1
   828  0077                     ??_setCursor:
   829  0077                     ___awdiv@quotient:	
   830                           ; 1 bytes @ 0x7
   831                           
   832                           
   833                           ; 2 bytes @ 0x7
   834  0077                     	ds	1
   835  0078                     ??___lldiv:
   836  0078                     ??___llmod:	
   837                           ; 1 bytes @ 0x8
   838                           
   839  0078                     setCursor@x:	
   840                           ; 1 bytes @ 0x8
   841                           
   842                           
   843                           ; 1 bytes @ 0x8
   844  0078                     	ds	1
   845  0079                     ??_text:
   846  0079                     ___llmod@counter:	
   847                           ; 1 bytes @ 0x9
   848                           
   849  0079                     ___lldiv@quotient:	
   850                           ; 1 bytes @ 0x9
   851                           
   852                           
   853                           ; 4 bytes @ 0x9
   854  0079                     	ds	1
   855  007A                     ?_getSeconds:
   856  007A                     text@txt:	
   857                           ; 1 bytes @ 0xA
   858                           
   859  007A                     getSeconds@seconds:	
   860                           ; 1 bytes @ 0xA
   861                           
   862                           
   863                           ; 4 bytes @ 0xA
   864  007A                     	ds	1
   865  007B                     ??_addText:
   866  007B                     ??_addChar:	
   867                           ; 1 bytes @ 0xB
   868                           
   869  007B                     addChar@character:	
   870                           ; 1 bytes @ 0xB
   871                           
   872                           
   873                           ; 1 bytes @ 0xB
   874  007B                     	ds	1
   875  007C                     addText@txtPtr:
   876                           
   877                           ; 1 bytes @ 0xC
   878  007C                     	ds	1
   879  007D                     addText@txt:
   880  007D                     ___lldiv@counter:	
   881                           ; 1 bytes @ 0xD
   882                           
   883                           
   884                           ; 1 bytes @ 0xD
   885  007D                     	ds	1
   886  007E                     ??_getSeconds:
   887  007E                     ??_getMinutes:	
   888                           ; 1 bytes @ 0xE
   889                           
   890  007E                     ??_getHours:	
   891                           ; 1 bytes @ 0xE
   892                           
   893  007E                     ??_onReset:	
   894                           ; 1 bytes @ 0xE
   895                           
   896  007E                     ??_onSecBut:	
   897                           ; 1 bytes @ 0xE
   898                           
   899  007E                     ??_onMinBut:	
   900                           ; 1 bytes @ 0xE
   901                           
   902                           
   903                           	psect	cstackBANK0
   904  0020                     __pcstackBANK0:	
   905                           ; 1 bytes @ 0xE
   906                           
   907  0020                     ?_getMinutes:
   908  0020                     ?_getHours:	
   909                           ; 1 bytes @ 0x0
   910                           
   911  0020                     ??_display2dgtChar:	
   912                           ; 1 bytes @ 0x0
   913                           
   914  0020                     getMinutes@seconds:	
   915                           ; 1 bytes @ 0x0
   916                           
   917  0020                     getHours@seconds:	
   918                           ; 4 bytes @ 0x0
   919                           
   920                           
   921                           ; 4 bytes @ 0x0
   922  0020                     	ds	3
   923  0023                     display2dgtChar@buf:
   924                           
   925                           ; 3 bytes @ 0x3
   926  0023                     	ds	3
   927  0026                     display2dgtChar@lsd:
   928                           
   929                           ; 1 bytes @ 0x6
   930  0026                     	ds	1
   931  0027                     display2dgtChar@input:
   932                           
   933                           ; 1 bytes @ 0x7
   934  0027                     	ds	1
   935  0028                     display2dgtChar@msd:
   936                           
   937                           ; 1 bytes @ 0x8
   938  0028                     	ds	1
   939  0029                     ?_displayTime:
   940  0029                     displayTime@seconds:	
   941                           ; 1 bytes @ 0x9
   942                           
   943                           
   944                           ; 4 bytes @ 0x9
   945  0029                     	ds	4
   946  002D                     displayTime@hasColon:
   947                           
   948                           ; 1 bytes @ 0xD
   949  002D                     	ds	1
   950  002E                     ??_displayTime:
   951                           
   952                           ; 1 bytes @ 0xE
   953  002E                     	ds	1
   954  002F                     _displayTime$302:
   955                           
   956                           ; 2 bytes @ 0xF
   957  002F                     	ds	2
   958  0031                     _displayTime$303:
   959                           
   960                           ; 2 bytes @ 0x11
   961  0031                     	ds	2
   962  0033                     displayTime@sec:
   963                           
   964                           ; 1 bytes @ 0x13
   965  0033                     	ds	1
   966  0034                     displayTime@min:
   967                           
   968                           ; 1 bytes @ 0x14
   969  0034                     	ds	1
   970  0035                     displayTime@hrs:
   971                           
   972                           ; 1 bytes @ 0x15
   973  0035                     	ds	1
   974  0036                     ??_updateDisplay:
   975                           
   976                           ; 1 bytes @ 0x16
   977  0036                     	ds	2
   978  0038                     ??_everySecond:
   979  0038                     ??_onStartBut:	
   980                           ; 1 bytes @ 0x18
   981                           
   982                           
   983                           ; 1 bytes @ 0x18
   984  0038                     	ds	4
   985  003C                     ??_isr_routine:
   986                           
   987                           ; 1 bytes @ 0x1C
   988  003C                     	ds	2
   989  003E                     ??_setPinOutputs:
   990  003E                     ??_writeHalfByte:	
   991                           ; 1 bytes @ 0x1E
   992                           
   993  003E                     ??_pulseEnable:	
   994                           ; 1 bytes @ 0x1E
   995                           
   996                           
   997                           ; 1 bytes @ 0x1E
   998  003E                     	ds	2
   999  0040                     writeHalfByte@data:
  1000                           
  1001                           ; 1 bytes @ 0x20
  1002  0040                     	ds	1
  1003  0041                     ??_enable4BitMode:
  1004  0041                     ?_writeFullByte:	
  1005                           ; 1 bytes @ 0x21
  1006                           
  1007  0041                     writeFullByte@mode:	
  1008                           ; 1 bytes @ 0x21
  1009                           
  1010                           
  1011                           ; 1 bytes @ 0x21
  1012  0041                     	ds	1
  1013  0042                     ??_writeFullByte:
  1014                           
  1015                           ; 1 bytes @ 0x22
  1016  0042                     	ds	1
  1017  0043                     ??_command:
  1018  0043                     ??_main:	
  1019                           ; 1 bytes @ 0x23
  1020                           
  1021                           
  1022                           	psect	maintext
  1023  04F9                     __pmaintext:	
  1024                           ; 1 bytes @ 0x23
  1025 ;;
  1026 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1027 ;;
  1028 ;; *************** function _main *****************
  1029 ;; Defined at:
  1030 ;;		line 89 in file "main.c"
  1031 ;; Parameters:    Size  Location     Type
  1032 ;;		None
  1033 ;; Auto vars:     Size  Location     Type
  1034 ;;		None
  1035 ;; Return value:  Size  Location     Type
  1036 ;;                  1    wreg      void 
  1037 ;; Registers used:
  1038 ;;		wreg, status,2, status,0, pclath, cstack
  1039 ;; Tracked objects:
  1040 ;;		On entry : B1F/0
  1041 ;;		On exit  : 0/0
  1042 ;;		Unchanged: 0/0
  1043 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1044 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1045 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1046 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1047 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1048 ;;Total ram usage:        0 bytes
  1049 ;; Hardware stack levels required when called: 18
  1050 ;; This function calls:
  1051 ;;		_initDisplay
  1052 ;; This function is called by:
  1053 ;;		Startup code after reset
  1054 ;; This function uses a non-reentrant model
  1055 ;;
  1056                           
  1057                           
  1058                           ;psect for function _main
  1059  04F9                     _main:
  1060  04F9                     l1821:	
  1061                           ;incstack = 0
  1062 ;; hardware stack exceeded
  1063                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
  1064                           
  1065                           
  1066                           ;main.c: 90:     OSCCON = 0b01111000;
  1067  04F9  3078               	movlw	120
  1068  04FA  0021               	movlb	1	; select bank1
  1069  04FB  0099               	movwf	25	;volatile
  1070  04FC                     l1823:
  1071                           
  1072                           ;main.c: 94:     initDisplay();
  1073  04FC  3184  24AD  3184   	fcall	_initDisplay
  1074  04FF                     l1825:
  1075                           
  1076                           ;main.c: 97:     TRISCbits.TRISC2 = 0;
  1077  04FF  0021               	movlb	1	; select bank1
  1078  0500  110E               	bcf	14,2	;volatile
  1079  0501                     l1827:
  1080                           
  1081                           ;main.c: 98:     LATCbits.LATC2 = 0;
  1082  0501  0022               	movlb	2	; select bank2
  1083  0502  110E               	bcf	14,2	;volatile
  1084  0503                     l1829:
  1085                           
  1086                           ;main.c: 101:     IOCBPbits.IOCBP4 = 1;
  1087  0503  0027               	movlb	7	; select bank7
  1088  0504  1614               	bsf	20,4	;volatile
  1089  0505                     l1831:
  1090                           
  1091                           ;main.c: 102:     IOCBPbits.IOCBP5 = 1;
  1092  0505  1694               	bsf	20,5	;volatile
  1093  0506                     l1833:
  1094                           
  1095                           ;main.c: 103:     IOCBPbits.IOCBP6 = 1;
  1096  0506  1714               	bsf	20,6	;volatile
  1097  0507                     l1835:
  1098                           
  1099                           ;main.c: 104:     ANSELBbits.ANSB4 = 0;
  1100  0507  0023               	movlb	3	; select bank3
  1101  0508  120D               	bcf	13,4	;volatile
  1102  0509                     l1837:
  1103                           
  1104                           ;main.c: 105:     ANSELBbits.ANSB5 = 0;
  1105  0509  128D               	bcf	13,5	;volatile
  1106  050A                     l1839:
  1107                           
  1108                           ;main.c: 106:     INTCONbits.IOCIE = 1;
  1109  050A  158B               	bsf	11,3	;volatile
  1110  050B                     l1841:
  1111                           
  1112                           ;main.c: 109:     PR2 = 250;
  1113  050B  30FA               	movlw	250
  1114  050C  0020               	movlb	0	; select bank0
  1115  050D  009B               	movwf	27	;volatile
  1116  050E                     l1843:
  1117                           
  1118                           ;main.c: 110:     T2CONbits.T2OUTPS = 0b1001;
  1119  050E  081C               	movf	28,w	;volatile
  1120  050F  3987               	andlw	-121
  1121  0510  3848               	iorlw	72
  1122  0511  009C               	movwf	28	;volatile
  1123  0512                     l1845:
  1124                           
  1125                           ;main.c: 111:     T2CONbits.T2CKPS = 0b11;
  1126  0512  3003               	movlw	3
  1127  0513  049C               	iorwf	28,f	;volatile
  1128  0514                     l1847:
  1129                           
  1130                           ;main.c: 112:     T2CONbits.TMR2ON = 1;
  1131  0514  151C               	bsf	28,2	;volatile
  1132  0515                     l1849:
  1133                           
  1134                           ;main.c: 114:     PIE1bits.TMR2IE = 1;
  1135  0515  0021               	movlb	1	; select bank1
  1136  0516  1491               	bsf	17,1	;volatile
  1137  0517                     l1851:
  1138                           
  1139                           ;main.c: 115:     INTCONbits.PEIE = 1;
  1140  0517  170B               	bsf	11,6	;volatile
  1141  0518                     l1853:
  1142                           
  1143                           ;main.c: 116:     INTCONbits.GIE = 1;
  1144  0518  178B               	bsf	11,7	;volatile
  1145  0519                     l1855:
  1146                           
  1147                           ;main.c: 119:     PIR1bits.TMR2IF = 1;
  1148  0519  0020               	movlb	0	; select bank0
  1149  051A  1491               	bsf	17,1	;volatile
  1150  051B                     l76:	
  1151                           ;main.c: 121:     while (1) {
  1152                           
  1153  051B                     l77:	
  1154                           ;main.c: 122:     }
  1155                           
  1156  051B  2D1B               	goto	l76
  1157  051C  3180  287D         	ljmp	start
  1158  051E                     __end_of_main:
  1159                           
  1160                           	psect	text1
  1161  04AD                     __ptext1:	
  1162 ;; *************** function _initDisplay *****************
  1163 ;; Defined at:
  1164 ;;		line 25 in file "display.c"
  1165 ;; Parameters:    Size  Location     Type
  1166 ;;		None
  1167 ;; Auto vars:     Size  Location     Type
  1168 ;;		None
  1169 ;; Return value:  Size  Location     Type
  1170 ;;                  1    wreg      void 
  1171 ;; Registers used:
  1172 ;;		wreg, status,2, status,0, pclath, cstack
  1173 ;; Tracked objects:
  1174 ;;		On entry : 0/0
  1175 ;;		On exit  : 0/0
  1176 ;;		Unchanged: 0/0
  1177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1178 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1179 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1180 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  1181 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  1182 ;;Total ram usage:        2 bytes
  1183 ;; Hardware stack levels used: 1
  1184 ;; Hardware stack levels required when called: 17
  1185 ;; This function calls:
  1186 ;;		_clearDisplay
  1187 ;;		_command
  1188 ;;		_enable4BitMode
  1189 ;;		_setPinOutputs
  1190 ;; This function is called by:
  1191 ;;		_main
  1192 ;; This function uses a non-reentrant model
  1193 ;;
  1194                           
  1195                           
  1196                           ;psect for function _initDisplay
  1197  04AD                     _initDisplay:
  1198  04AD                     l1813:	
  1199                           ;incstack = 0
  1200 ;; hardware stack exceeded
  1201                           ; Regs used in _initDisplay: [wreg+status,2+status,0+pclath+cstack]
  1202                           
  1203                           
  1204                           ;display.c: 26:     setPinOutputs();
  1205  04AD  3186  2607  3184   	fcall	_setPinOutputs
  1206  04B0                     l1815:
  1207                           
  1208                           ;display.c: 29:     _delay((unsigned long)((50)*(16000000/4000.0)));
  1209  04B0  3002               	movlw	2
  1210  04B1  0021               	movlb	1	; select bank1
  1211  04B2  00A4               	movwf	(??_initDisplay^(0+128)+1)
  1212  04B3  3004               	movlw	4
  1213  04B4  00A3               	movwf	??_initDisplay^(0+128)
  1214  04B5  30BA               	movlw	186
  1215  04B6                     u1387:
  1216  04B6  0B89               	decfsz	9,f
  1217  04B7  2CB6               	goto	u1387
  1218  04B8  0BA3               	decfsz	??_initDisplay^(0+128),f
  1219  04B9  2CB6               	goto	u1387
  1220  04BA  0BA4               	decfsz	(??_initDisplay^(0+128)+1),f
  1221  04BB  2CB6               	goto	u1387
  1222  04BC  0000               	nop
  1223  04BD                     l1817:
  1224                           
  1225                           ;display.c: 32:     LATCbits.LATC7 = 0;
  1226  04BD  0022               	movlb	2	; select bank2
  1227  04BE  138E               	bcf	14,7	;volatile
  1228  04BF                     l1819:
  1229                           
  1230                           ;display.c: 33:     LATBbits.LATB7 = 0;
  1231  04BF  138D               	bcf	13,7	;volatile
  1232                           
  1233                           ;display.c: 35:     enable4BitMode();
  1234  04C0  3184  24D3  3184   	fcall	_enable4BitMode
  1235                           
  1236                           ;display.c: 37:     command(0x20 | (0x00 | 0x00 | 0x08));
  1237  04C3  3028               	movlw	40
  1238  04C4  3185  25FD  3184   	fcall	_command
  1239                           
  1240                           ;display.c: 38:     command(0x08 | (0x04 | 0x00 | 0x00));
  1241  04C7  300C               	movlw	12
  1242  04C8  3185  25FD  3184   	fcall	_command
  1243                           
  1244                           ;display.c: 40:     clearDisplay();
  1245  04CB  3185  25CF  3184   	fcall	_clearDisplay
  1246                           
  1247                           ;display.c: 42:     command(0x04 | (0x02 | 0x00));
  1248  04CE  3006               	movlw	6
  1249  04CF  3185  25FD  3184   	fcall	_command
  1250  04D2                     l168:
  1251  04D2  0008               	return
  1252  04D3                     __end_of_initDisplay:
  1253                           
  1254                           	psect	text2
  1255  0607                     __ptext2:	
  1256 ;; *************** function _setPinOutputs *****************
  1257 ;; Defined at:
  1258 ;;		line 85 in file "display.c"
  1259 ;; Parameters:    Size  Location     Type
  1260 ;;		None
  1261 ;; Auto vars:     Size  Location     Type
  1262 ;;		None
  1263 ;; Return value:  Size  Location     Type
  1264 ;;                  1    wreg      void 
  1265 ;; Registers used:
  1266 ;;		None
  1267 ;; Tracked objects:
  1268 ;;		On entry : 0/0
  1269 ;;		On exit  : 0/0
  1270 ;;		Unchanged: 0/0
  1271 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1272 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1273 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1274 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1275 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1276 ;;Total ram usage:        0 bytes
  1277 ;; Hardware stack levels used: 1
  1278 ;; Hardware stack levels required when called: 12
  1279 ;; This function calls:
  1280 ;;		Nothing
  1281 ;; This function is called by:
  1282 ;;		_initDisplay
  1283 ;; This function uses a non-reentrant model
  1284 ;;
  1285                           
  1286                           
  1287                           ;psect for function _setPinOutputs
  1288  0607                     _setPinOutputs:
  1289  0607                     l1555:	
  1290                           ;incstack = 0
  1291                           ; Regs used in _setPinOutputs: []
  1292                           
  1293                           
  1294                           ;display.c: 86:     TRISBbits.TRISB7 = 0;
  1295  0607  0021               	movlb	1	; select bank1
  1296  0608  138D               	bcf	13,7	;volatile
  1297                           
  1298                           ;display.c: 87:     TRISCbits.TRISC7 = 0;
  1299  0609  138E               	bcf	14,7	;volatile
  1300                           
  1301                           ;display.c: 88:     TRISCbits.TRISC5 = 0;
  1302  060A  128E               	bcf	14,5	;volatile
  1303                           
  1304                           ;display.c: 89:     TRISCbits.TRISC4 = 0;
  1305  060B  120E               	bcf	14,4	;volatile
  1306                           
  1307                           ;display.c: 90:     TRISCbits.TRISC3 = 0;
  1308  060C  118E               	bcf	14,3	;volatile
  1309                           
  1310                           ;display.c: 91:     TRISCbits.TRISC6 = 0;
  1311  060D  130E               	bcf	14,6	;volatile
  1312  060E                     l194:
  1313  060E  0008               	return
  1314  060F                     __end_of_setPinOutputs:
  1315                           
  1316                           	psect	text3
  1317  04D3                     __ptext3:	
  1318 ;; *************** function _enable4BitMode *****************
  1319 ;; Defined at:
  1320 ;;		line 94 in file "display.c"
  1321 ;; Parameters:    Size  Location     Type
  1322 ;;		None
  1323 ;; Auto vars:     Size  Location     Type
  1324 ;;		None
  1325 ;; Return value:  Size  Location     Type
  1326 ;;                  1    wreg      void 
  1327 ;; Registers used:
  1328 ;;		wreg, status,2, status,0, pclath, cstack
  1329 ;; Tracked objects:
  1330 ;;		On entry : 0/0
  1331 ;;		On exit  : 0/0
  1332 ;;		Unchanged: 0/0
  1333 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1334 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1335 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1336 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1337 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1338 ;;Total ram usage:        1 bytes
  1339 ;; Hardware stack levels used: 1
  1340 ;; Hardware stack levels required when called: 14
  1341 ;; This function calls:
  1342 ;;		_writeHalfByte
  1343 ;; This function is called by:
  1344 ;;		_initDisplay
  1345 ;; This function uses a non-reentrant model
  1346 ;;
  1347                           
  1348                           
  1349                           ;psect for function _enable4BitMode
  1350  04D3                     _enable4BitMode:
  1351  04D3                     l1797:	
  1352                           ;incstack = 0
  1353                           ; Regs used in _enable4BitMode: [wreg+status,2+status,0+pclath+cstack]
  1354                           
  1355                           
  1356                           ;display.c: 95:     writeHalfByte(3);
  1357  04D3  3003               	movlw	3
  1358  04D4  3182  225A  3184   	fcall	_writeHalfByte
  1359  04D7                     l1799:
  1360                           
  1361                           ;display.c: 96:     _delay((unsigned long)((5)*(16000000/4000.0)));
  1362  04D7  301A               	movlw	26
  1363  04D8  0020               	movlb	0	; select bank0
  1364  04D9  00C1               	movwf	??_enable4BitMode
  1365  04DA  30F8               	movlw	248
  1366  04DB                     u1397:
  1367  04DB  0B89               	decfsz	9,f
  1368  04DC  2CDB               	goto	u1397
  1369  04DD  0BC1               	decfsz	??_enable4BitMode,f
  1370  04DE  2CDB               	goto	u1397
  1371  04DF  0000               	nop
  1372  04E0                     l1801:
  1373                           
  1374                           ;display.c: 97:     writeHalfByte(3);
  1375  04E0  3003               	movlw	3
  1376  04E1  3182  225A  3184   	fcall	_writeHalfByte
  1377                           
  1378                           ;display.c: 98:     _delay((unsigned long)((5)*(16000000/4000.0)));
  1379  04E4  301A               	movlw	26
  1380  04E5  0020               	movlb	0	; select bank0
  1381  04E6  00C1               	movwf	??_enable4BitMode
  1382  04E7  30F8               	movlw	248
  1383  04E8                     u1407:
  1384  04E8  0B89               	decfsz	9,f
  1385  04E9  2CE8               	goto	u1407
  1386  04EA  0BC1               	decfsz	??_enable4BitMode,f
  1387  04EB  2CE8               	goto	u1407
  1388  04EC  0000               	nop
  1389  04ED                     l1803:
  1390                           
  1391                           ;display.c: 99:     writeHalfByte(3);
  1392  04ED  3003               	movlw	3
  1393  04EE  3182  225A  3184   	fcall	_writeHalfByte
  1394  04F1                     l1805:
  1395                           
  1396                           ;display.c: 100:     _delay((unsigned long)((150)*(16000000/4000000.0)));
  1397  04F1  30C8               	movlw	200
  1398  04F2                     u1417:
  1399  04F2  0B89               	decfsz	9,f
  1400  04F3  2CF2               	goto	u1417
  1401                           
  1402                           ;display.c: 101:     writeHalfByte(2);
  1403  04F4  3002               	movlw	2
  1404  04F5  3182  225A  3184   	fcall	_writeHalfByte
  1405  04F8                     l197:
  1406  04F8  0008               	return
  1407  04F9                     __end_of_enable4BitMode:
  1408                           
  1409                           	psect	text4
  1410  05CF                     __ptext4:	
  1411 ;; *************** function _clearDisplay *****************
  1412 ;; Defined at:
  1413 ;;		line 57 in file "display.c"
  1414 ;; Parameters:    Size  Location     Type
  1415 ;;		None
  1416 ;; Auto vars:     Size  Location     Type
  1417 ;;		None
  1418 ;; Return value:  Size  Location     Type
  1419 ;;                  1    wreg      void 
  1420 ;; Registers used:
  1421 ;;		wreg, status,2, status,0, pclath, cstack
  1422 ;; Tracked objects:
  1423 ;;		On entry : 0/0
  1424 ;;		On exit  : 0/0
  1425 ;;		Unchanged: 0/0
  1426 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1427 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1428 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1429 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  1430 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  1431 ;;Total ram usage:        1 bytes
  1432 ;; Hardware stack levels used: 1
  1433 ;; Hardware stack levels required when called: 16
  1434 ;; This function calls:
  1435 ;;		_command
  1436 ;; This function is called by:
  1437 ;;		_initDisplay
  1438 ;;		_setText
  1439 ;; This function uses a non-reentrant model
  1440 ;;
  1441                           
  1442                           
  1443                           ;psect for function _clearDisplay
  1444  05CF                     _clearDisplay:
  1445  05CF                     l1807:	
  1446                           ;incstack = 0
  1447 ;; hardware stack exceeded
  1448                           ; Regs used in _clearDisplay: [wreg+status,2+status,0+pclath+cstack]
  1449                           
  1450                           
  1451                           ;display.c: 58:     command(0x01);
  1452  05CF  3001               	movlw	1
  1453  05D0  3185  25FD  3185   	fcall	_command
  1454  05D3                     l1809:
  1455                           
  1456                           ;display.c: 59:     _delay((unsigned long)((2)*(16000000/4000.0)));
  1457  05D3  300B               	movlw	11
  1458  05D4  0021               	movlb	1	; select bank1
  1459  05D5  00A2               	movwf	??_clearDisplay^(0+128)
  1460  05D6  3062               	movlw	98
  1461  05D7                     u1427:
  1462  05D7  0B89               	decfsz	9,f
  1463  05D8  2DD7               	goto	u1427
  1464  05D9  0BA2               	decfsz	??_clearDisplay^(0+128),f
  1465  05DA  2DD7               	goto	u1427
  1466  05DB  0000               	nop
  1467  05DC                     l1811:
  1468                           
  1469                           ;display.c: 60:     currentPos = 0;
  1470  05DC  0020               	movlb	0	; select bank0
  1471  05DD  01CB               	clrf	_currentPos
  1472  05DE                     l176:
  1473  05DE  0008               	return
  1474  05DF                     __end_of_clearDisplay:
  1475                           
  1476                           	psect	text5
  1477  05FD                     __ptext5:	
  1478 ;; *************** function _command *****************
  1479 ;; Defined at:
  1480 ;;		line 125 in file "display.c"
  1481 ;; Parameters:    Size  Location     Type
  1482 ;;  cmd             1    wreg     unsigned char 
  1483 ;; Auto vars:     Size  Location     Type
  1484 ;;  cmd             1    1[BANK1 ] unsigned char 
  1485 ;; Return value:  Size  Location     Type
  1486 ;;                  1    wreg      void 
  1487 ;; Registers used:
  1488 ;;		wreg, status,2, status,0, pclath, cstack
  1489 ;; Tracked objects:
  1490 ;;		On entry : 0/0
  1491 ;;		On exit  : 0/0
  1492 ;;		Unchanged: 0/0
  1493 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1494 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1495 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  1496 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1497 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  1498 ;;Total ram usage:        1 bytes
  1499 ;; Hardware stack levels used: 1
  1500 ;; Hardware stack levels required when called: 15
  1501 ;; This function calls:
  1502 ;;		_writeFullByte
  1503 ;; This function is called by:
  1504 ;;		_initDisplay
  1505 ;;		_clearDisplay
  1506 ;;		_homeDisplay
  1507 ;; This function uses a non-reentrant model
  1508 ;;
  1509                           
  1510                           
  1511                           ;psect for function _command
  1512  05FD                     _command:
  1513                           
  1514                           ;incstack = 0
  1515 ;; hardware stack exceeded
  1516                           ; Regs used in _command: [wreg+status,2+status,0+pclath+cstack]
  1517                           ;command@cmd stored from wreg
  1518  05FD  0021               	movlb	1	; select bank1
  1519  05FE  00A1               	movwf	command@cmd^(0+128)
  1520  05FF                     l1795:
  1521                           
  1522                           ;display.c: 126:     writeFullByte(cmd, 0);
  1523  05FF  0020               	movlb	0	; select bank0
  1524  0600  01C1               	clrf	writeFullByte@mode
  1525  0601  0021               	movlb	1	; select bank1
  1526  0602  0821               	movf	command@cmd^(0+128),w
  1527  0603  3185  255B  3185   	fcall	_writeFullByte
  1528  0606                     l206:
  1529  0606  0008               	return
  1530  0607                     __end_of_command:
  1531                           
  1532                           	psect	text6
  1533  055B                     __ptext6:	
  1534 ;; *************** function _writeFullByte *****************
  1535 ;; Defined at:
  1536 ;;		line 118 in file "display.c"
  1537 ;; Parameters:    Size  Location     Type
  1538 ;;  data            1    wreg     unsigned char 
  1539 ;;  mode            1   33[BANK0 ] unsigned char 
  1540 ;; Auto vars:     Size  Location     Type
  1541 ;;  data            1    0[BANK1 ] unsigned char 
  1542 ;; Return value:  Size  Location     Type
  1543 ;;                  1    wreg      void 
  1544 ;; Registers used:
  1545 ;;		wreg, status,2, status,0, pclath, cstack
  1546 ;; Tracked objects:
  1547 ;;		On entry : 0/0
  1548 ;;		On exit  : 0/0
  1549 ;;		Unchanged: 0/0
  1550 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1551 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1552 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  1553 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1554 ;;      Totals:         0       2       1       0       0       0       0       0       0       0       0       0       
      +0       0
  1555 ;;Total ram usage:        3 bytes
  1556 ;; Hardware stack levels used: 1
  1557 ;; Hardware stack levels required when called: 14
  1558 ;; This function calls:
  1559 ;;		_writeHalfByte
  1560 ;; This function is called by:
  1561 ;;		_command
  1562 ;; This function uses a non-reentrant model
  1563 ;;
  1564                           
  1565                           
  1566                           ;psect for function _writeFullByte
  1567  055B                     _writeFullByte:
  1568                           
  1569                           ;incstack = 0
  1570 ;; hardware stack exceeded
  1571                           ; Regs used in _writeFullByte: [wreg+status,2+status,0+pclath+cstack]
  1572                           ;writeFullByte@data stored from wreg
  1573  055B  0021               	movlb	1	; select bank1
  1574  055C  00A0               	movwf	writeFullByte@data^(0+128)
  1575  055D                     l1789:
  1576                           
  1577                           ;display.c: 119:     LATCbits.LATC7 = mode;
  1578  055D  0020               	movlb	0	; select bank0
  1579  055E  0C41               	rrf	writeFullByte@mode,w
  1580  055F  0022               	movlb	2	; select bank2
  1581  0560  1C03               	skipc
  1582  0561  138E               	bcf	14,7	;volatile
  1583  0562  1803               	skipnc
  1584  0563  178E               	bsf	14,7	;volatile
  1585  0564                     l1791:
  1586                           
  1587                           ;display.c: 121:     writeHalfByte(data >> 4);
  1588  0564  0021               	movlb	1	; select bank1
  1589  0565  0820               	movf	writeFullByte@data^(0+128),w
  1590  0566  0020               	movlb	0	; select bank0
  1591  0567  00C2               	movwf	??_writeFullByte
  1592  0568  3004               	movlw	4
  1593  0569                     u1375:
  1594  0569  36C2               	lsrf	??_writeFullByte,f
  1595  056A  0B89               	decfsz	9,f
  1596  056B  2D69               	goto	u1375
  1597  056C  0842               	movf	??_writeFullByte,w
  1598  056D  3182  225A  3185   	fcall	_writeHalfByte
  1599  0570                     l1793:
  1600                           
  1601                           ;display.c: 122:     writeHalfByte(data);
  1602  0570  0021               	movlb	1	; select bank1
  1603  0571  0820               	movf	writeFullByte@data^(0+128),w
  1604  0572  3182  225A  3185   	fcall	_writeHalfByte
  1605  0575                     l203:
  1606  0575  0008               	return
  1607  0576                     __end_of_writeFullByte:
  1608                           
  1609                           	psect	text7
  1610  025A                     __ptext7:	
  1611 ;; *************** function _writeHalfByte *****************
  1612 ;; Defined at:
  1613 ;;		line 107 in file "display.c"
  1614 ;; Parameters:    Size  Location     Type
  1615 ;;  data            1    wreg     unsigned char 
  1616 ;; Auto vars:     Size  Location     Type
  1617 ;;  data            1   32[BANK0 ] unsigned char 
  1618 ;; Return value:  Size  Location     Type
  1619 ;;                  1    wreg      void 
  1620 ;; Registers used:
  1621 ;;		wreg, status,2, status,0, pclath, cstack
  1622 ;; Tracked objects:
  1623 ;;		On entry : 0/0
  1624 ;;		On exit  : 0/0
  1625 ;;		Unchanged: 0/0
  1626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1627 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1628 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1629 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1630 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1631 ;;Total ram usage:        3 bytes
  1632 ;; Hardware stack levels used: 1
  1633 ;; Hardware stack levels required when called: 13
  1634 ;; This function calls:
  1635 ;;		_pulseEnable
  1636 ;; This function is called by:
  1637 ;;		_enable4BitMode
  1638 ;;		_writeFullByte
  1639 ;; This function uses a non-reentrant model
  1640 ;;
  1641                           
  1642                           
  1643                           ;psect for function _writeHalfByte
  1644  025A                     _writeHalfByte:
  1645                           
  1646                           ;incstack = 0
  1647                           ; Regs used in _writeHalfByte: [wreg+status,2+status,0+pclath+cstack]
  1648                           ;writeHalfByte@data stored from wreg
  1649  025A  0020               	movlb	0	; select bank0
  1650  025B  00C0               	movwf	writeHalfByte@data
  1651  025C                     l1785:
  1652                           
  1653                           ;display.c: 108:     LATCbits.LATC5 = (data >> 0) & 1;
  1654  025C  0840               	movf	writeHalfByte@data,w
  1655  025D  3901               	andlw	1
  1656  025E  00BE               	movwf	??_writeHalfByte
  1657  025F  0EBE               	swapf	??_writeHalfByte,f
  1658  0260  0DBE               	rlf	??_writeHalfByte,f
  1659  0261  0022               	movlb	2	; select bank2
  1660  0262  080E               	movf	14,w	;volatile
  1661  0263  0020               	movlb	0	; select bank0
  1662  0264  063E               	xorwf	??_writeHalfByte,w
  1663  0265  39DF               	andlw	-33
  1664  0266  063E               	xorwf	??_writeHalfByte,w
  1665  0267  0022               	movlb	2	; select bank2
  1666  0268  008E               	movwf	14	;volatile
  1667                           
  1668                           ;display.c: 109:     LATCbits.LATC4 = (data >> 1) & 1;
  1669  0269  0020               	movlb	0	; select bank0
  1670  026A  3640               	lsrf	writeHalfByte@data,w
  1671  026B  3901               	andlw	1
  1672  026C  00BE               	movwf	??_writeHalfByte
  1673  026D  0EBE               	swapf	??_writeHalfByte,f
  1674  026E  0022               	movlb	2	; select bank2
  1675  026F  080E               	movf	14,w	;volatile
  1676  0270  0020               	movlb	0	; select bank0
  1677  0271  063E               	xorwf	??_writeHalfByte,w
  1678  0272  39EF               	andlw	-17
  1679  0273  063E               	xorwf	??_writeHalfByte,w
  1680  0274  0022               	movlb	2	; select bank2
  1681  0275  008E               	movwf	14	;volatile
  1682                           
  1683                           ;display.c: 110:     LATCbits.LATC3 = (data >> 2) & 1;
  1684  0276  0020               	movlb	0	; select bank0
  1685  0277  0840               	movf	writeHalfByte@data,w
  1686  0278  00BE               	movwf	??_writeHalfByte
  1687  0279  3002               	movlw	2
  1688  027A                     u1355:
  1689  027A  36BE               	lsrf	??_writeHalfByte,f
  1690  027B  0B89               	decfsz	9,f
  1691  027C  2A7A               	goto	u1355
  1692  027D  083E               	movf	??_writeHalfByte,w
  1693  027E  3901               	andlw	1
  1694  027F  00BF               	movwf	??_writeHalfByte+1
  1695  0280  0DBF               	rlf	??_writeHalfByte+1,f
  1696  0281  0DBF               	rlf	??_writeHalfByte+1,f
  1697  0282  0DBF               	rlf	??_writeHalfByte+1,f
  1698  0283  0022               	movlb	2	; select bank2
  1699  0284  080E               	movf	14,w	;volatile
  1700  0285  0020               	movlb	0	; select bank0
  1701  0286  063F               	xorwf	??_writeHalfByte+1,w
  1702  0287  39F7               	andlw	-9
  1703  0288  063F               	xorwf	??_writeHalfByte+1,w
  1704  0289  0022               	movlb	2	; select bank2
  1705  028A  008E               	movwf	14	;volatile
  1706                           
  1707                           ;display.c: 111:     LATCbits.LATC6 = (data >> 3) & 1;
  1708  028B  0020               	movlb	0	; select bank0
  1709  028C  0840               	movf	writeHalfByte@data,w
  1710  028D  00BE               	movwf	??_writeHalfByte
  1711  028E  3003               	movlw	3
  1712  028F                     u1365:
  1713  028F  36BE               	lsrf	??_writeHalfByte,f
  1714  0290  0B89               	decfsz	9,f
  1715  0291  2A8F               	goto	u1365
  1716  0292  083E               	movf	??_writeHalfByte,w
  1717  0293  3901               	andlw	1
  1718  0294  00BF               	movwf	??_writeHalfByte+1
  1719  0295  0EBF               	swapf	??_writeHalfByte+1,f
  1720  0296  0DBF               	rlf	??_writeHalfByte+1,f
  1721  0297  0DBF               	rlf	??_writeHalfByte+1,f
  1722  0298  0022               	movlb	2	; select bank2
  1723  0299  080E               	movf	14,w	;volatile
  1724  029A  0020               	movlb	0	; select bank0
  1725  029B  063F               	xorwf	??_writeHalfByte+1,w
  1726  029C  39BF               	andlw	-65
  1727  029D  063F               	xorwf	??_writeHalfByte+1,w
  1728  029E  0022               	movlb	2	; select bank2
  1729  029F  008E               	movwf	14	;volatile
  1730  02A0                     l1787:
  1731                           
  1732                           ;display.c: 113:     pulseEnable();
  1733  02A0  3185  25DF  3182   	fcall	_pulseEnable
  1734  02A3                     l200:
  1735  02A3  0008               	return
  1736  02A4                     __end_of_writeHalfByte:
  1737                           
  1738                           	psect	text8
  1739  05DF                     __ptext8:	
  1740 ;; *************** function _pulseEnable *****************
  1741 ;; Defined at:
  1742 ;;		line 141 in file "display.c"
  1743 ;; Parameters:    Size  Location     Type
  1744 ;;		None
  1745 ;; Auto vars:     Size  Location     Type
  1746 ;;		None
  1747 ;; Return value:  Size  Location     Type
  1748 ;;                  1    wreg      void 
  1749 ;; Registers used:
  1750 ;;		wreg
  1751 ;; Tracked objects:
  1752 ;;		On entry : 0/0
  1753 ;;		On exit  : 0/0
  1754 ;;		Unchanged: 0/0
  1755 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1756 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1757 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1758 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1759 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1760 ;;Total ram usage:        0 bytes
  1761 ;; Hardware stack levels used: 1
  1762 ;; Hardware stack levels required when called: 12
  1763 ;; This function calls:
  1764 ;;		Nothing
  1765 ;; This function is called by:
  1766 ;;		_writeHalfByte
  1767 ;; This function uses a non-reentrant model
  1768 ;;
  1769                           
  1770                           
  1771                           ;psect for function _pulseEnable
  1772  05DF                     _pulseEnable:
  1773  05DF                     l1781:	
  1774                           ;incstack = 0
  1775                           ; Regs used in _pulseEnable: [wreg]
  1776                           
  1777                           
  1778                           ;display.c: 142:     LATBbits.LATB7 = 0;
  1779  05DF  0022               	movlb	2	; select bank2
  1780  05E0  138D               	bcf	13,7	;volatile
  1781                           
  1782                           ;display.c: 143:     _delay((unsigned long)((1)*(16000000/4000000.0)));
  1783  05E1  3200               	nop2	;2 cycle nop
  1784  05E2  3200               	nop2	;2 cycle nop
  1785                           
  1786                           ;display.c: 144:     LATBbits.LATB7 = 1;
  1787  05E3  0022               	movlb	2	; select bank2
  1788  05E4  178D               	bsf	13,7	;volatile
  1789                           
  1790                           ;display.c: 145:     _delay((unsigned long)((1)*(16000000/4000000.0)));
  1791  05E5  3200               	nop2	;2 cycle nop
  1792  05E6  3200               	nop2	;2 cycle nop
  1793                           
  1794                           ;display.c: 146:     LATBbits.LATB7 = 0;
  1795  05E7  0022               	movlb	2	; select bank2
  1796  05E8  138D               	bcf	13,7	;volatile
  1797  05E9                     l1783:
  1798                           
  1799                           ;display.c: 147:     _delay((unsigned long)((100)*(16000000/4000000.0)));
  1800  05E9  3085               	movlw	133
  1801  05EA                     u1437:
  1802  05EA  0B89               	decfsz	9,f
  1803  05EB  2DEA               	goto	u1437
  1804  05EC  0000               	nop
  1805  05ED                     l213:
  1806  05ED  0008               	return
  1807  05EE                     __end_of_pulseEnable:
  1808                           
  1809                           	psect	intentry
  1810  0004                     __pintentry:	
  1811 ;; *************** function _isr_routine *****************
  1812 ;; Defined at:
  1813 ;;		line 218 in file "main.c"
  1814 ;; Parameters:    Size  Location     Type
  1815 ;;		None
  1816 ;; Auto vars:     Size  Location     Type
  1817 ;;		None
  1818 ;; Return value:  Size  Location     Type
  1819 ;;                  1    wreg      void 
  1820 ;; Registers used:
  1821 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1822 ;; Tracked objects:
  1823 ;;		On entry : 0/0
  1824 ;;		On exit  : 0/0
  1825 ;;		Unchanged: 0/0
  1826 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1827 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1828 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1829 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1830 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1831 ;;Total ram usage:        2 bytes
  1832 ;; Hardware stack levels used: 1
  1833 ;; Hardware stack levels required when called: 11
  1834 ;; This function calls:
  1835 ;;		_everySecond
  1836 ;;		_onMinBut
  1837 ;;		_onReset
  1838 ;;		_onSecBut
  1839 ;;		_onStartBut
  1840 ;; This function is called by:
  1841 ;;		Interrupt level 1
  1842 ;; This function uses a non-reentrant model
  1843 ;;
  1844                           
  1845  0004                     _isr_routine:
  1846                           
  1847                           ;incstack = 0
  1848 ;; hardware stack exceeded
  1849  0004  147E               	bsf	int$flags,0	;set compiler interrupt flag (level 1)
  1850                           
  1851                           ; Regs used in _isr_routine: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1852  0005  3180               	pagesel	$
  1853  0006                     i1l1689:
  1854                           
  1855                           ;main.c: 219:     if (PIR1bits.TMR2IF) {
  1856  0006  0020               	movlb	0	; select bank0
  1857  0007  1C91               	btfss	17,1	;volatile
  1858  0008  280A               	goto	u128_21
  1859  0009  280B               	goto	u128_20
  1860  000A                     u128_21:
  1861  000A  281A               	goto	i1l1699
  1862  000B                     u128_20:
  1863  000B                     i1l1691:
  1864                           
  1865                           ;main.c: 220:         PIR1bits.TMR2IF = 0;
  1866  000B  1091               	bcf	17,1	;volatile
  1867  000C                     i1l1693:
  1868                           
  1869                           ;main.c: 222:         if (timerCounter++ == 25) {
  1870  000C  3001               	movlw	1
  1871  000D  00BC               	movwf	??_isr_routine
  1872  000E  083C               	movf	??_isr_routine,w
  1873  000F  07CE               	addwf	_timerCounter,f
  1874  0010  301A               	movlw	26
  1875  0011  064E               	xorwf	_timerCounter,w
  1876  0012  1D03               	btfss	3,2
  1877  0013  2815               	goto	u129_21
  1878  0014  2816               	goto	u129_20
  1879  0015                     u129_21:
  1880  0015  281A               	goto	i1l1699
  1881  0016                     u129_20:
  1882  0016                     i1l1695:
  1883                           
  1884                           ;main.c: 223:             timerCounter = 0;
  1885  0016  01CE               	clrf	_timerCounter
  1886  0017                     i1l1697:
  1887                           
  1888                           ;main.c: 225:             everySecond();
  1889  0017  3182  220F  3180   	fcall	_everySecond
  1890  001A                     i1l1699:
  1891                           
  1892                           ;main.c: 230:     if (PORTBbits.RB4 && PORTBbits.RB5) {
  1893  001A  0020               	movlb	0	; select bank0
  1894  001B  1E0D               	btfss	13,4	;volatile
  1895  001C  281E               	goto	u130_21
  1896  001D  281F               	goto	u130_20
  1897  001E                     u130_21:
  1898  001E  2836               	goto	i1l1711
  1899  001F                     u130_20:
  1900  001F                     i1l1701:
  1901  001F  1E8D               	btfss	13,5	;volatile
  1902  0020  2822               	goto	u131_21
  1903  0021  2823               	goto	u131_20
  1904  0022                     u131_21:
  1905  0022  2836               	goto	i1l1711
  1906  0023                     u131_20:
  1907  0023                     i1l1703:
  1908                           
  1909                           ;main.c: 231:         _delay((unsigned long)((50)*(16000000/4000.0)));
  1910  0023  3002               	movlw	2
  1911  0024  0020               	movlb	0	; select bank0
  1912  0025  00BD               	movwf	??_isr_routine+1
  1913  0026  3004               	movlw	4
  1914  0027  00BC               	movwf	??_isr_routine
  1915  0028  30BA               	movlw	186
  1916  0029                     u144_27:
  1917  0029  0B89               	decfsz	9,f
  1918  002A  2829               	goto	u144_27
  1919  002B  0BBC               	decfsz	??_isr_routine,f
  1920  002C  2829               	goto	u144_27
  1921  002D  0BBD               	decfsz	??_isr_routine+1,f
  1922  002E  2829               	goto	u144_27
  1923  002F  0000               	nop
  1924  0030                     i1l1705:
  1925                           
  1926                           ;main.c: 232:         IOCBFbits.IOCBF5 = 0;
  1927  0030  0027               	movlb	7	; select bank7
  1928  0031  1296               	bcf	22,5	;volatile
  1929  0032                     i1l1707:
  1930                           
  1931                           ;main.c: 233:         IOCBFbits.IOCBF4 = 0;
  1932  0032  1216               	bcf	22,4	;volatile
  1933  0033                     i1l1709:
  1934                           
  1935                           ;main.c: 235:         onReset();
  1936  0033  3185  258E  3180   	fcall	_onReset
  1937  0036                     i1l1711:
  1938                           
  1939                           ;main.c: 238:     if (IOCBFbits.IOCBF6) {
  1940  0036  0027               	movlb	7	; select bank7
  1941  0037  1F16               	btfss	22,6	;volatile
  1942  0038  283A               	goto	u132_21
  1943  0039  283B               	goto	u132_20
  1944  003A                     u132_21:
  1945  003A  284E               	goto	i1l132
  1946  003B                     u132_20:
  1947  003B                     i1l1713:
  1948                           
  1949                           ;main.c: 239:         onStartBut();
  1950  003B  3183  23EB  3180   	fcall	_onStartBut
  1951  003E                     i1l1715:
  1952                           
  1953                           ;main.c: 240:         _delay((unsigned long)((150)*(16000000/4000.0)));
  1954  003E  3004               	movlw	4
  1955  003F  0020               	movlb	0	; select bank0
  1956  0040  00BD               	movwf	??_isr_routine+1
  1957  0041  300C               	movlw	12
  1958  0042  00BC               	movwf	??_isr_routine
  1959  0043  3033               	movlw	51
  1960  0044                     u145_27:
  1961  0044  0B89               	decfsz	9,f
  1962  0045  2844               	goto	u145_27
  1963  0046  0BBC               	decfsz	??_isr_routine,f
  1964  0047  2844               	goto	u145_27
  1965  0048  0BBD               	decfsz	??_isr_routine+1,f
  1966  0049  2844               	goto	u145_27
  1967  004A  3200               	nop2
  1968  004B                     i1l1717:
  1969                           
  1970                           ;main.c: 241:         IOCBFbits.IOCBF6 = 0;
  1971  004B  0027               	movlb	7	; select bank7
  1972  004C  1316               	bcf	22,6	;volatile
  1973                           
  1974                           ;main.c: 242:     } else if (IOCBFbits.IOCBF5) {
  1975  004D  287B               	goto	i1l137
  1976  004E                     i1l132:
  1977  004E  1E96               	btfss	22,5	;volatile
  1978  004F  2851               	goto	u133_21
  1979  0050  2852               	goto	u133_20
  1980  0051                     u133_21:
  1981  0051  2865               	goto	i1l134
  1982  0052                     u133_20:
  1983  0052                     i1l1719:
  1984                           
  1985                           ;main.c: 243:         onSecBut();
  1986  0052  3184  2451  3180   	fcall	_onSecBut
  1987  0055                     i1l1721:
  1988                           
  1989                           ;main.c: 244:         _delay((unsigned long)((150)*(16000000/4000.0)));
  1990  0055  3004               	movlw	4
  1991  0056  0020               	movlb	0	; select bank0
  1992  0057  00BD               	movwf	??_isr_routine+1
  1993  0058  300C               	movlw	12
  1994  0059  00BC               	movwf	??_isr_routine
  1995  005A  3033               	movlw	51
  1996  005B                     u146_27:
  1997  005B  0B89               	decfsz	9,f
  1998  005C  285B               	goto	u146_27
  1999  005D  0BBC               	decfsz	??_isr_routine,f
  2000  005E  285B               	goto	u146_27
  2001  005F  0BBD               	decfsz	??_isr_routine+1,f
  2002  0060  285B               	goto	u146_27
  2003  0061  3200               	nop2
  2004  0062                     i1l1723:
  2005                           
  2006                           ;main.c: 245:         IOCBFbits.IOCBF5 = 0;
  2007  0062  0027               	movlb	7	; select bank7
  2008  0063  1296               	bcf	22,5	;volatile
  2009                           
  2010                           ;main.c: 246:     } else if (IOCBFbits.IOCBF4) {
  2011  0064  287B               	goto	i1l137
  2012  0065                     i1l134:
  2013  0065  1E16               	btfss	22,4	;volatile
  2014  0066  2868               	goto	u134_21
  2015  0067  2869               	goto	u134_20
  2016  0068                     u134_21:
  2017  0068  287B               	goto	i1l137
  2018  0069                     u134_20:
  2019  0069                     i1l1725:
  2020                           
  2021                           ;main.c: 247:         onMinBut();
  2022  0069  3184  247F  3180   	fcall	_onMinBut
  2023  006C                     i1l1727:
  2024                           
  2025                           ;main.c: 248:         _delay((unsigned long)((150)*(16000000/4000.0)));
  2026  006C  3004               	movlw	4
  2027  006D  0020               	movlb	0	; select bank0
  2028  006E  00BD               	movwf	??_isr_routine+1
  2029  006F  300C               	movlw	12
  2030  0070  00BC               	movwf	??_isr_routine
  2031  0071  3033               	movlw	51
  2032  0072                     u147_27:
  2033  0072  0B89               	decfsz	9,f
  2034  0073  2872               	goto	u147_27
  2035  0074  0BBC               	decfsz	??_isr_routine,f
  2036  0075  2872               	goto	u147_27
  2037  0076  0BBD               	decfsz	??_isr_routine+1,f
  2038  0077  2872               	goto	u147_27
  2039  0078  3200               	nop2
  2040  0079                     i1l1729:
  2041                           
  2042                           ;main.c: 249:         IOCBFbits.IOCBF4 = 0;
  2043  0079  0027               	movlb	7	; select bank7
  2044  007A  1216               	bcf	22,4	;volatile
  2045  007B                     i1l137:
  2046  007B  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2047  007C  0009               	retfie
  2048  007D                     __end_of_isr_routine:
  2049                           
  2050                           	psect	text10
  2051  03EB                     __ptext10:	
  2052 ;; *************** function _onStartBut *****************
  2053 ;; Defined at:
  2054 ;;		line 173 in file "main.c"
  2055 ;; Parameters:    Size  Location     Type
  2056 ;;		None
  2057 ;; Auto vars:     Size  Location     Type
  2058 ;;		None
  2059 ;; Return value:  Size  Location     Type
  2060 ;;                  1    wreg      void 
  2061 ;; Registers used:
  2062 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2063 ;; Tracked objects:
  2064 ;;		On entry : 0/0
  2065 ;;		On exit  : 0/0
  2066 ;;		Unchanged: 0/0
  2067 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2068 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2069 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2070 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2071 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2072 ;;Total ram usage:        2 bytes
  2073 ;; Hardware stack levels used: 1
  2074 ;; Hardware stack levels required when called: 10
  2075 ;; This function calls:
  2076 ;;		_updateDisplay
  2077 ;; This function is called by:
  2078 ;;		_isr_routine
  2079 ;; This function uses a non-reentrant model
  2080 ;;
  2081                           
  2082                           
  2083                           ;psect for function _onStartBut
  2084  03EB                     _onStartBut:
  2085  03EB                     i1l1605:	
  2086                           ;incstack = 0
  2087 ;; hardware stack exceeded
  2088                           ; Regs used in _onStartBut: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2089                           
  2090                           
  2091                           ;main.c: 174:     switch (currentMode) {
  2092  03EB  2C03               	goto	i1l1615
  2093  03EC                     i1l1607:
  2094                           
  2095                           ;main.c: 176:             currentMode = RUNNING;
  2096  03EC  3002               	movlw	2
  2097  03ED  00B8               	movwf	??_onStartBut
  2098  03EE  0838               	movf	??_onStartBut,w
  2099  03EF  00CC               	movwf	_currentMode
  2100                           
  2101                           ;main.c: 177:             currentSeconds = configuredSeconds;
  2102  03F0  084A               	movf	_configuredSeconds+3,w
  2103  03F1  00C6               	movwf	_currentSeconds+3
  2104  03F2  0849               	movf	_configuredSeconds+2,w
  2105  03F3  00C5               	movwf	_currentSeconds+2
  2106  03F4  0848               	movf	_configuredSeconds+1,w
  2107  03F5  00C4               	movwf	_currentSeconds+1
  2108  03F6  0847               	movf	_configuredSeconds,w
  2109  03F7  00C3               	movwf	_currentSeconds
  2110                           
  2111                           ;main.c: 178:             break;
  2112  03F8  2C1A               	goto	i1l1617
  2113  03F9                     i1l1609:
  2114                           
  2115                           ;main.c: 180:             currentMode = RUNNING;
  2116  03F9  3002               	movlw	2
  2117  03FA  00B8               	movwf	??_onStartBut
  2118  03FB  0838               	movf	??_onStartBut,w
  2119  03FC  00CC               	movwf	_currentMode
  2120                           
  2121                           ;main.c: 181:             break;
  2122  03FD  2C1A               	goto	i1l1617
  2123  03FE                     i1l106:	
  2124                           ;main.c: 182:         case RUNNING:
  2125                           
  2126                           
  2127                           ;main.c: 183:             currentMode = PAUSED;
  2128  03FE  01CC               	clrf	_currentMode
  2129  03FF  0ACC               	incf	_currentMode,f
  2130                           
  2131                           ;main.c: 184:             break;
  2132  0400  2C1A               	goto	i1l1617
  2133  0401                     i1l1611:
  2134                           
  2135                           ;main.c: 186:             currentMode = STOPPED;
  2136  0401  01CC               	clrf	_currentMode
  2137                           
  2138                           ;main.c: 187:             break;
  2139  0402  2C1A               	goto	i1l1617
  2140  0403                     i1l1615:
  2141  0403  0020               	movlb	0	; select bank0
  2142  0404  084C               	movf	_currentMode,w
  2143  0405  00B8               	movwf	??_onStartBut
  2144  0406  01B9               	clrf	??_onStartBut+1
  2145                           
  2146                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2147                           ; Switch size 1, requested type "simple"
  2148                           ; Number of cases is 1, Range of values is 0 to 0
  2149                           ; switch strategies available:
  2150                           ; Name         Instructions Cycles
  2151                           ; simple_byte            4     3 (average)
  2152                           ; direct_byte            8     6 (fixed)
  2153                           ; jumptable            260     6 (fixed)
  2154                           ;	Chosen strategy is simple_byte
  2155  0407  0839               	movf	??_onStartBut+1,w
  2156  0408  3A00               	xorlw	0	; case 0
  2157  0409  1903               	skipnz
  2158  040A  2C0C               	goto	i1l1907
  2159  040B  2C1A               	goto	i1l1617
  2160  040C                     i1l1907:
  2161                           
  2162                           ; Switch size 1, requested type "simple"
  2163                           ; Number of cases is 4, Range of values is 0 to 3
  2164                           ; switch strategies available:
  2165                           ; Name         Instructions Cycles
  2166                           ; simple_byte           13     7 (average)
  2167                           ; direct_byte           14     6 (fixed)
  2168                           ; jumptable            260     6 (fixed)
  2169                           ;	Chosen strategy is simple_byte
  2170  040C  0838               	movf	??_onStartBut,w
  2171  040D  3A00               	xorlw	0	; case 0
  2172  040E  1903               	skipnz
  2173  040F  2BEC               	goto	i1l1607
  2174  0410  3A01               	xorlw	1	; case 1
  2175  0411  1903               	skipnz
  2176  0412  2BF9               	goto	i1l1609
  2177  0413  3A03               	xorlw	3	; case 2
  2178  0414  1903               	skipnz
  2179  0415  2BFE               	goto	i1l106
  2180  0416  3A01               	xorlw	1	; case 3
  2181  0417  1903               	skipnz
  2182  0418  2C01               	goto	i1l1611
  2183  0419  2C1A               	goto	i1l1617
  2184  041A                     i1l1617:
  2185                           
  2186                           ;main.c: 190:     secondCounter = 0;
  2187  041A  01CD               	clrf	_secondCounter
  2188  041B                     i1l1619:
  2189                           
  2190                           ;main.c: 191:     updateDisplay();
  2191  041B  3183  2335  3183   	fcall	_updateDisplay
  2192  041E                     i1l108:
  2193  041E  0008               	return
  2194  041F                     __end_of_onStartBut:
  2195                           
  2196                           	psect	text11
  2197  0451                     __ptext11:	
  2198 ;; *************** function _onSecBut *****************
  2199 ;; Defined at:
  2200 ;;		line 194 in file "main.c"
  2201 ;; Parameters:    Size  Location     Type
  2202 ;;		None
  2203 ;; Auto vars:     Size  Location     Type
  2204 ;;		None
  2205 ;; Return value:  Size  Location     Type
  2206 ;;                  1    wreg      void 
  2207 ;; Registers used:
  2208 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2209 ;; Tracked objects:
  2210 ;;		On entry : 0/0
  2211 ;;		On exit  : 0/0
  2212 ;;		Unchanged: 0/0
  2213 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2214 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2215 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2216 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2217 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2218 ;;Total ram usage:        0 bytes
  2219 ;; Hardware stack levels used: 1
  2220 ;; Hardware stack levels required when called: 10
  2221 ;; This function calls:
  2222 ;;		_updateDisplay
  2223 ;; This function is called by:
  2224 ;;		_isr_routine
  2225 ;; This function uses a non-reentrant model
  2226 ;;
  2227                           
  2228                           
  2229                           ;psect for function _onSecBut
  2230  0451                     _onSecBut:
  2231  0451                     i1l1625:	
  2232                           ;incstack = 0
  2233 ;; hardware stack exceeded
  2234                           ; Regs used in _onSecBut: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2235                           
  2236                           
  2237                           ;main.c: 195:     if (currentMode == STOPPED) {
  2238  0451  0020               	movlb	0	; select bank0
  2239  0452  084C               	movf	_currentMode,w
  2240  0453  1D03               	btfss	3,2
  2241  0454  2C56               	goto	u120_21
  2242  0455  2C57               	goto	u120_20
  2243  0456                     u120_21:
  2244  0456  2C60               	goto	i1l1629
  2245  0457                     u120_20:
  2246  0457                     i1l1627:
  2247                           
  2248                           ;main.c: 196:         configuredSeconds += 1;
  2249  0457  3001               	movlw	1
  2250  0458  07C7               	addwf	_configuredSeconds,f
  2251  0459  3000               	movlw	0
  2252  045A  3DC8               	addwfc	_configuredSeconds+1,f
  2253  045B  3000               	movlw	0
  2254  045C  3DC9               	addwfc	_configuredSeconds+2,f
  2255  045D  3000               	movlw	0
  2256  045E  3DCA               	addwfc	_configuredSeconds+3,f
  2257                           
  2258                           ;main.c: 197:     } else if (
  2259  045F  2C7B               	goto	i1l1637
  2260  0460                     i1l1629:
  2261  0460  3002               	movlw	2
  2262  0461  064C               	xorwf	_currentMode,w
  2263  0462  1903               	btfsc	3,2
  2264  0463  2C65               	goto	u121_21
  2265  0464  2C66               	goto	u121_20
  2266  0465                     u121_21:
  2267  0465  2C6B               	goto	i1l1633
  2268  0466                     u121_20:
  2269  0466                     i1l1631:
  2270  0466  034C               	decf	_currentMode,w
  2271  0467  1D03               	btfss	3,2
  2272  0468  2C6A               	goto	u122_21
  2273  0469  2C6B               	goto	u122_20
  2274  046A                     u122_21:
  2275  046A  2C7B               	goto	i1l1637
  2276  046B                     u122_20:
  2277  046B                     i1l1633:
  2278  046B  084A               	movf	_configuredSeconds+3,w
  2279  046C  0449               	iorwf	_configuredSeconds+2,w
  2280  046D  0448               	iorwf	_configuredSeconds+1,w
  2281  046E  0447               	iorwf	_configuredSeconds,w
  2282  046F  1903               	skipnz
  2283  0470  2C72               	goto	u123_21
  2284  0471  2C73               	goto	u123_20
  2285  0472                     u123_21:
  2286  0472  2C7B               	goto	i1l1637
  2287  0473                     u123_20:
  2288  0473                     i1l1635:
  2289                           
  2290                           ;main.c: 200:             ) {;main.c: 201:         currentSeconds += 1;
  2291  0473  3001               	movlw	1
  2292  0474  07C3               	addwf	_currentSeconds,f
  2293  0475  3000               	movlw	0
  2294  0476  3DC4               	addwfc	_currentSeconds+1,f
  2295  0477  3000               	movlw	0
  2296  0478  3DC5               	addwfc	_currentSeconds+2,f
  2297  0479  3000               	movlw	0
  2298  047A  3DC6               	addwfc	_currentSeconds+3,f
  2299  047B                     i1l1637:
  2300                           
  2301                           ;main.c: 203:     updateDisplay();
  2302  047B  3183  2335  3184   	fcall	_updateDisplay
  2303  047E                     i1l116:
  2304  047E  0008               	return
  2305  047F                     __end_of_onSecBut:
  2306                           
  2307                           	psect	text12
  2308  058E                     __ptext12:	
  2309 ;; *************** function _onReset *****************
  2310 ;; Defined at:
  2311 ;;		line 165 in file "main.c"
  2312 ;; Parameters:    Size  Location     Type
  2313 ;;		None
  2314 ;; Auto vars:     Size  Location     Type
  2315 ;;		None
  2316 ;; Return value:  Size  Location     Type
  2317 ;;                  1    wreg      void 
  2318 ;; Registers used:
  2319 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2320 ;; Tracked objects:
  2321 ;;		On entry : 0/0
  2322 ;;		On exit  : 0/0
  2323 ;;		Unchanged: 0/0
  2324 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2325 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2326 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2327 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2328 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2329 ;;Total ram usage:        0 bytes
  2330 ;; Hardware stack levels used: 1
  2331 ;; Hardware stack levels required when called: 10
  2332 ;; This function calls:
  2333 ;;		_updateDisplay
  2334 ;; This function is called by:
  2335 ;;		_isr_routine
  2336 ;; This function uses a non-reentrant model
  2337 ;;
  2338                           
  2339                           
  2340                           ;psect for function _onReset
  2341  058E                     _onReset:
  2342  058E                     i1l1599:	
  2343                           ;incstack = 0
  2344 ;; hardware stack exceeded
  2345                           ; Regs used in _onReset: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2346                           
  2347                           
  2348                           ;main.c: 166:     configuredSeconds = 0;
  2349  058E  3000               	movlw	0
  2350  058F  0020               	movlb	0	; select bank0
  2351  0590  00CA               	movwf	_configuredSeconds+3
  2352  0591  3000               	movlw	0
  2353  0592  00C9               	movwf	_configuredSeconds+2
  2354  0593  3000               	movlw	0
  2355  0594  00C8               	movwf	_configuredSeconds+1
  2356  0595  3000               	movlw	0
  2357  0596  00C7               	movwf	_configuredSeconds
  2358                           
  2359                           ;main.c: 167:     currentSeconds = 0;
  2360  0597  3000               	movlw	0
  2361  0598  00C6               	movwf	_currentSeconds+3
  2362  0599  3000               	movlw	0
  2363  059A  00C5               	movwf	_currentSeconds+2
  2364  059B  3000               	movlw	0
  2365  059C  00C4               	movwf	_currentSeconds+1
  2366  059D  3000               	movlw	0
  2367  059E  00C3               	movwf	_currentSeconds
  2368  059F                     i1l1601:
  2369                           
  2370                           ;main.c: 168:     currentMode = STOPPED;
  2371  059F  01CC               	clrf	_currentMode
  2372  05A0                     i1l1603:
  2373                           
  2374                           ;main.c: 170:     updateDisplay();
  2375  05A0  3183  2335  3185   	fcall	_updateDisplay
  2376  05A3                     i1l99:
  2377  05A3  0008               	return
  2378  05A4                     __end_of_onReset:
  2379                           
  2380                           	psect	text13
  2381  047F                     __ptext13:	
  2382 ;; *************** function _onMinBut *****************
  2383 ;; Defined at:
  2384 ;;		line 206 in file "main.c"
  2385 ;; Parameters:    Size  Location     Type
  2386 ;;		None
  2387 ;; Auto vars:     Size  Location     Type
  2388 ;;		None
  2389 ;; Return value:  Size  Location     Type
  2390 ;;                  1    wreg      void 
  2391 ;; Registers used:
  2392 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2393 ;; Tracked objects:
  2394 ;;		On entry : 0/0
  2395 ;;		On exit  : 0/0
  2396 ;;		Unchanged: 0/0
  2397 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2398 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2399 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2400 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2401 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2402 ;;Total ram usage:        0 bytes
  2403 ;; Hardware stack levels used: 1
  2404 ;; Hardware stack levels required when called: 10
  2405 ;; This function calls:
  2406 ;;		_updateDisplay
  2407 ;; This function is called by:
  2408 ;;		_isr_routine
  2409 ;; This function uses a non-reentrant model
  2410 ;;
  2411                           
  2412                           
  2413                           ;psect for function _onMinBut
  2414  047F                     _onMinBut:
  2415  047F                     i1l1639:	
  2416                           ;incstack = 0
  2417 ;; hardware stack exceeded
  2418                           ; Regs used in _onMinBut: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2419                           
  2420                           
  2421                           ;main.c: 207:     if (currentMode == STOPPED) {
  2422  047F  0020               	movlb	0	; select bank0
  2423  0480  084C               	movf	_currentMode,w
  2424  0481  1D03               	btfss	3,2
  2425  0482  2C84               	goto	u124_21
  2426  0483  2C85               	goto	u124_20
  2427  0484                     u124_21:
  2428  0484  2C8E               	goto	i1l1643
  2429  0485                     u124_20:
  2430  0485                     i1l1641:
  2431                           
  2432                           ;main.c: 208:         configuredSeconds += 60;
  2433  0485  303C               	movlw	60
  2434  0486  07C7               	addwf	_configuredSeconds,f
  2435  0487  3000               	movlw	0
  2436  0488  3DC8               	addwfc	_configuredSeconds+1,f
  2437  0489  3000               	movlw	0
  2438  048A  3DC9               	addwfc	_configuredSeconds+2,f
  2439  048B  3000               	movlw	0
  2440  048C  3DCA               	addwfc	_configuredSeconds+3,f
  2441                           
  2442                           ;main.c: 209:     } else if (
  2443  048D  2CA9               	goto	i1l1651
  2444  048E                     i1l1643:
  2445  048E  3002               	movlw	2
  2446  048F  064C               	xorwf	_currentMode,w
  2447  0490  1903               	btfsc	3,2
  2448  0491  2C93               	goto	u125_21
  2449  0492  2C94               	goto	u125_20
  2450  0493                     u125_21:
  2451  0493  2C99               	goto	i1l1647
  2452  0494                     u125_20:
  2453  0494                     i1l1645:
  2454  0494  034C               	decf	_currentMode,w
  2455  0495  1D03               	btfss	3,2
  2456  0496  2C98               	goto	u126_21
  2457  0497  2C99               	goto	u126_20
  2458  0498                     u126_21:
  2459  0498  2CA9               	goto	i1l1651
  2460  0499                     u126_20:
  2461  0499                     i1l1647:
  2462  0499  084A               	movf	_configuredSeconds+3,w
  2463  049A  0449               	iorwf	_configuredSeconds+2,w
  2464  049B  0448               	iorwf	_configuredSeconds+1,w
  2465  049C  0447               	iorwf	_configuredSeconds,w
  2466  049D  1903               	skipnz
  2467  049E  2CA0               	goto	u127_21
  2468  049F  2CA1               	goto	u127_20
  2469  04A0                     u127_21:
  2470  04A0  2CA9               	goto	i1l1651
  2471  04A1                     u127_20:
  2472  04A1                     i1l1649:
  2473                           
  2474                           ;main.c: 212:             ) {;main.c: 213:         currentSeconds += 60;
  2475  04A1  303C               	movlw	60
  2476  04A2  07C3               	addwf	_currentSeconds,f
  2477  04A3  3000               	movlw	0
  2478  04A4  3DC4               	addwfc	_currentSeconds+1,f
  2479  04A5  3000               	movlw	0
  2480  04A6  3DC5               	addwfc	_currentSeconds+2,f
  2481  04A7  3000               	movlw	0
  2482  04A8  3DC6               	addwfc	_currentSeconds+3,f
  2483  04A9                     i1l1651:
  2484                           
  2485                           ;main.c: 215:     updateDisplay();
  2486  04A9  3183  2335  3184   	fcall	_updateDisplay
  2487  04AC                     i1l124:
  2488  04AC  0008               	return
  2489  04AD                     __end_of_onMinBut:
  2490                           
  2491                           	psect	text14
  2492  020F                     __ptext14:	
  2493 ;; *************** function _everySecond *****************
  2494 ;; Defined at:
  2495 ;;		line 142 in file "main.c"
  2496 ;; Parameters:    Size  Location     Type
  2497 ;;		None
  2498 ;; Auto vars:     Size  Location     Type
  2499 ;;		None
  2500 ;; Return value:  Size  Location     Type
  2501 ;;                  1    wreg      void 
  2502 ;; Registers used:
  2503 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2504 ;; Tracked objects:
  2505 ;;		On entry : 0/0
  2506 ;;		On exit  : 0/0
  2507 ;;		Unchanged: 0/0
  2508 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2509 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2510 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2511 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2512 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2513 ;;Total ram usage:        4 bytes
  2514 ;; Hardware stack levels used: 1
  2515 ;; Hardware stack levels required when called: 10
  2516 ;; This function calls:
  2517 ;;		_updateDisplay
  2518 ;; This function is called by:
  2519 ;;		_isr_routine
  2520 ;; This function uses a non-reentrant model
  2521 ;;
  2522                           
  2523                           
  2524                           ;psect for function _everySecond
  2525  020F                     _everySecond:
  2526  020F                     i1l1581:	
  2527                           ;incstack = 0
  2528 ;; hardware stack exceeded
  2529                           ; Regs used in _everySecond: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2530                           
  2531                           
  2532                           ;main.c: 143:     secondCounter++;
  2533  020F  3001               	movlw	1
  2534  0210  0020               	movlb	0	; select bank0
  2535  0211  00B8               	movwf	??_everySecond
  2536  0212  0838               	movf	??_everySecond,w
  2537  0213  07CD               	addwf	_secondCounter,f
  2538                           
  2539                           ;main.c: 145:     if (currentMode == RUNNING) {
  2540  0214  3002               	movlw	2
  2541  0215  064C               	xorwf	_currentMode,w
  2542  0216  1D03               	btfss	3,2
  2543  0217  2A19               	goto	u114_21
  2544  0218  2A1A               	goto	u114_20
  2545  0219                     u114_21:
  2546  0219  2A48               	goto	i1l1593
  2547  021A                     u114_20:
  2548  021A                     i1l1583:
  2549                           
  2550                           ;main.c: 146:         if (configuredSeconds == 0) {
  2551  021A  084A               	movf	_configuredSeconds+3,w
  2552  021B  0449               	iorwf	_configuredSeconds+2,w
  2553  021C  0448               	iorwf	_configuredSeconds+1,w
  2554  021D  0447               	iorwf	_configuredSeconds,w
  2555  021E  1D03               	skipz
  2556  021F  2A21               	goto	u115_21
  2557  0220  2A22               	goto	u115_20
  2558  0221                     u115_21:
  2559  0221  2A2B               	goto	i1l1587
  2560  0222                     u115_20:
  2561  0222                     i1l1585:
  2562                           
  2563                           ;main.c: 147:             currentSeconds++;
  2564  0222  3001               	movlw	1
  2565  0223  07C3               	addwf	_currentSeconds,f
  2566  0224  3000               	movlw	0
  2567  0225  3DC4               	addwfc	_currentSeconds+1,f
  2568  0226  3000               	movlw	0
  2569  0227  3DC5               	addwfc	_currentSeconds+2,f
  2570  0228  3000               	movlw	0
  2571  0229  3DC6               	addwfc	_currentSeconds+3,f
  2572                           
  2573                           ;main.c: 148:         } else {
  2574  022A  2A3B               	goto	i1l93
  2575  022B                     i1l1587:
  2576                           
  2577                           ;main.c: 149:             currentSeconds--;
  2578  022B  3001               	movlw	1
  2579  022C  00B8               	movwf	??_everySecond
  2580  022D  3000               	movlw	0
  2581  022E  00B9               	movwf	??_everySecond+1
  2582  022F  3000               	movlw	0
  2583  0230  00BA               	movwf	??_everySecond+2
  2584  0231  3000               	movlw	0
  2585  0232  00BB               	movwf	??_everySecond+3
  2586  0233  0838               	movf	??_everySecond,w
  2587  0234  02C3               	subwf	_currentSeconds,f
  2588  0235  0839               	movf	??_everySecond+1,w
  2589  0236  3BC4               	subwfb	_currentSeconds+1,f
  2590  0237  083A               	movf	??_everySecond+2,w
  2591  0238  3BC5               	subwfb	_currentSeconds+2,f
  2592  0239  083B               	movf	??_everySecond+3,w
  2593  023A  3BC6               	subwfb	_currentSeconds+3,f
  2594  023B                     i1l93:	
  2595                           ;main.c: 150:         }
  2596                           
  2597                           
  2598                           ;main.c: 152:         if (currentSeconds == 0) {
  2599  023B  0846               	movf	_currentSeconds+3,w
  2600  023C  0445               	iorwf	_currentSeconds+2,w
  2601  023D  0444               	iorwf	_currentSeconds+1,w
  2602  023E  0443               	iorwf	_currentSeconds,w
  2603  023F  1D03               	skipz
  2604  0240  2A42               	goto	u116_21
  2605  0241  2A43               	goto	u116_20
  2606  0242                     u116_21:
  2607  0242  2A48               	goto	i1l1593
  2608  0243                     u116_20:
  2609  0243                     i1l1589:
  2610                           
  2611                           ;main.c: 153:             currentMode = ALARM;
  2612  0243  3003               	movlw	3
  2613  0244  00B8               	movwf	??_everySecond
  2614  0245  0838               	movf	??_everySecond,w
  2615  0246  00CC               	movwf	_currentMode
  2616  0247                     i1l1591:
  2617                           
  2618                           ;main.c: 154:             secondCounter = 0;
  2619  0247  01CD               	clrf	_secondCounter
  2620  0248                     i1l1593:
  2621                           
  2622                           ;main.c: 158:     if (currentMode == ALARM) {
  2623  0248  3003               	movlw	3
  2624  0249  064C               	xorwf	_currentMode,w
  2625  024A  1D03               	btfss	3,2
  2626  024B  2A4D               	goto	u117_21
  2627  024C  2A4E               	goto	u117_20
  2628  024D                     u117_21:
  2629  024D  2A56               	goto	i1l1597
  2630  024E                     u117_20:
  2631  024E                     i1l1595:
  2632                           
  2633                           ;main.c: 159:         LATCbits.LATC2 = !(secondCounter % 2);
  2634  024E  1C4D               	btfss	_secondCounter,0
  2635  024F  2A51               	goto	u118_21
  2636  0250  2A54               	goto	u118_20
  2637  0251                     u118_21:
  2638  0251  0022               	movlb	2	; select bank2
  2639  0252  150E               	bsf	14,2	;volatile
  2640  0253  2A56               	goto	u119_24
  2641  0254                     u118_20:
  2642  0254  0022               	movlb	2	; select bank2
  2643  0255  110E               	bcf	14,2	;volatile
  2644  0256                     u119_24:
  2645  0256                     i1l1597:
  2646                           
  2647                           ;main.c: 162:     updateDisplay();
  2648  0256  3183  2335  3182   	fcall	_updateDisplay
  2649  0259                     i1l96:
  2650  0259  0008               	return
  2651  025A                     __end_of_everySecond:
  2652                           
  2653                           	psect	text15
  2654  0335                     __ptext15:	
  2655 ;; *************** function _updateDisplay *****************
  2656 ;; Defined at:
  2657 ;;		line 125 in file "main.c"
  2658 ;; Parameters:    Size  Location     Type
  2659 ;;		None
  2660 ;; Auto vars:     Size  Location     Type
  2661 ;;		None
  2662 ;; Return value:  Size  Location     Type
  2663 ;;                  1    wreg      void 
  2664 ;; Registers used:
  2665 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2666 ;; Tracked objects:
  2667 ;;		On entry : 0/0
  2668 ;;		On exit  : 0/0
  2669 ;;		Unchanged: 0/0
  2670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2671 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2672 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2673 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2674 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2675 ;;Total ram usage:        2 bytes
  2676 ;; Hardware stack levels used: 1
  2677 ;; Hardware stack levels required when called: 9
  2678 ;; This function calls:
  2679 ;;		_displayTime
  2680 ;; This function is called by:
  2681 ;;		_everySecond
  2682 ;;		_onReset
  2683 ;;		_onStartBut
  2684 ;;		_onSecBut
  2685 ;;		_onMinBut
  2686 ;; This function uses a non-reentrant model
  2687 ;;
  2688                           
  2689                           
  2690                           ;psect for function _updateDisplay
  2691  0335                     _updateDisplay:
  2692  0335                     i1l1537:	
  2693                           ;incstack = 0
  2694 ;; hardware stack exceeded
  2695                           ; Regs used in _updateDisplay: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2696                           
  2697                           
  2698                           ;main.c: 126:     switch (currentMode) {
  2699  0335  2B63               	goto	i1l1549
  2700  0336                     i1l1539:
  2701                           
  2702                           ;main.c: 128:             displayTime(configuredSeconds, 1);
  2703  0336  084A               	movf	_configuredSeconds+3,w
  2704  0337  00AC               	movwf	displayTime@seconds+3
  2705  0338  0849               	movf	_configuredSeconds+2,w
  2706  0339  00AB               	movwf	displayTime@seconds+2
  2707  033A  0848               	movf	_configuredSeconds+1,w
  2708  033B  00AA               	movwf	displayTime@seconds+1
  2709  033C  0847               	movf	_configuredSeconds,w
  2710  033D  00A9               	movwf	displayTime@seconds
  2711  033E  01AD               	clrf	displayTime@hasColon
  2712  033F  0AAD               	incf	displayTime@hasColon,f
  2713  0340  3180  209B  3183   	fcall	_displayTime
  2714                           
  2715                           ;main.c: 129:             break;
  2716  0343  2B7A               	goto	i1l88
  2717  0344                     i1l1541:
  2718                           
  2719                           ;main.c: 131:             displayTime(currentSeconds, secondCounter % 2);
  2720  0344  0846               	movf	_currentSeconds+3,w
  2721  0345  00AC               	movwf	displayTime@seconds+3
  2722  0346  0845               	movf	_currentSeconds+2,w
  2723  0347  00AB               	movwf	displayTime@seconds+2
  2724  0348  0844               	movf	_currentSeconds+1,w
  2725  0349  00AA               	movwf	displayTime@seconds+1
  2726  034A  0843               	movf	_currentSeconds,w
  2727  034B  00A9               	movwf	displayTime@seconds
  2728  034C  084D               	movf	_secondCounter,w
  2729  034D  3901               	andlw	1
  2730  034E  00B6               	movwf	??_updateDisplay
  2731  034F  0836               	movf	??_updateDisplay,w
  2732  0350  00AD               	movwf	displayTime@hasColon
  2733  0351  3180  209B  3183   	fcall	_displayTime
  2734                           
  2735                           ;main.c: 132:             break;
  2736  0354  2B7A               	goto	i1l88
  2737  0355                     i1l1543:
  2738                           
  2739                           ;main.c: 134:             displayTime(currentSeconds, 1);
  2740  0355  0846               	movf	_currentSeconds+3,w
  2741  0356  00AC               	movwf	displayTime@seconds+3
  2742  0357  0845               	movf	_currentSeconds+2,w
  2743  0358  00AB               	movwf	displayTime@seconds+2
  2744  0359  0844               	movf	_currentSeconds+1,w
  2745  035A  00AA               	movwf	displayTime@seconds+1
  2746  035B  0843               	movf	_currentSeconds,w
  2747  035C  00A9               	movwf	displayTime@seconds
  2748  035D  01AD               	clrf	displayTime@hasColon
  2749  035E  0AAD               	incf	displayTime@hasColon,f
  2750  035F  3180  209B  3183   	fcall	_displayTime
  2751                           
  2752                           ;main.c: 135:             break;
  2753  0362  2B7A               	goto	i1l88
  2754  0363                     i1l1549:
  2755  0363  0020               	movlb	0	; select bank0
  2756  0364  084C               	movf	_currentMode,w
  2757  0365  00B6               	movwf	??_updateDisplay
  2758  0366  01B7               	clrf	??_updateDisplay+1
  2759                           
  2760                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2761                           ; Switch size 1, requested type "simple"
  2762                           ; Number of cases is 1, Range of values is 0 to 0
  2763                           ; switch strategies available:
  2764                           ; Name         Instructions Cycles
  2765                           ; simple_byte            4     3 (average)
  2766                           ; direct_byte            8     6 (fixed)
  2767                           ; jumptable            260     6 (fixed)
  2768                           ;	Chosen strategy is simple_byte
  2769  0367  0837               	movf	??_updateDisplay+1,w
  2770  0368  3A00               	xorlw	0	; case 0
  2771  0369  1903               	skipnz
  2772  036A  2B6C               	goto	i1l1909
  2773  036B  2B7A               	goto	i1l88
  2774  036C                     i1l1909:
  2775                           
  2776                           ; Switch size 1, requested type "simple"
  2777                           ; Number of cases is 4, Range of values is 0 to 3
  2778                           ; switch strategies available:
  2779                           ; Name         Instructions Cycles
  2780                           ; simple_byte           13     7 (average)
  2781                           ; direct_byte           14     6 (fixed)
  2782                           ; jumptable            260     6 (fixed)
  2783                           ;	Chosen strategy is simple_byte
  2784  036C  0836               	movf	??_updateDisplay,w
  2785  036D  3A00               	xorlw	0	; case 0
  2786  036E  1903               	skipnz
  2787  036F  2B36               	goto	i1l1539
  2788  0370  3A01               	xorlw	1	; case 1
  2789  0371  1903               	skipnz
  2790  0372  2B44               	goto	i1l1541
  2791  0373  3A03               	xorlw	3	; case 2
  2792  0374  1903               	skipnz
  2793  0375  2B55               	goto	i1l1543
  2794  0376  3A01               	xorlw	1	; case 3
  2795  0377  1903               	skipnz
  2796  0378  2B44               	goto	i1l1541
  2797  0379  2B7A               	goto	i1l88
  2798  037A                     i1l88:
  2799  037A  0008               	return
  2800  037B                     __end_of_updateDisplay:
  2801                           
  2802                           	psect	text16
  2803  009B                     __ptext16:	
  2804 ;; *************** function _displayTime *****************
  2805 ;; Defined at:
  2806 ;;		line 75 in file "main.c"
  2807 ;; Parameters:    Size  Location     Type
  2808 ;;  seconds         4    9[BANK0 ] unsigned long 
  2809 ;;  hasColon        1   13[BANK0 ] unsigned char 
  2810 ;; Auto vars:     Size  Location     Type
  2811 ;;  hrs             1   21[BANK0 ] unsigned char 
  2812 ;;  min             1   20[BANK0 ] unsigned char 
  2813 ;;  sec             1   19[BANK0 ] unsigned char 
  2814 ;; Return value:  Size  Location     Type
  2815 ;;                  1    wreg      void 
  2816 ;; Registers used:
  2817 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2818 ;; Tracked objects:
  2819 ;;		On entry : 0/0
  2820 ;;		On exit  : 0/0
  2821 ;;		Unchanged: 0/0
  2822 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2823 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2824 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2825 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2826 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2827 ;;Total ram usage:       13 bytes
  2828 ;; Hardware stack levels used: 1
  2829 ;; Hardware stack levels required when called: 8
  2830 ;; This function calls:
  2831 ;;		_addChar
  2832 ;;		_display2dgtChar
  2833 ;;		_getHours
  2834 ;;		_getMinutes
  2835 ;;		_getSeconds
  2836 ;;		_setCursor
  2837 ;; This function is called by:
  2838 ;;		_updateDisplay
  2839 ;; This function uses a non-reentrant model
  2840 ;;
  2841                           
  2842                           
  2843                           ;psect for function _displayTime
  2844  009B                     _displayTime:
  2845  009B                     i1l1511:	
  2846                           ;incstack = 0
  2847 ;; hardware stack exceeded
  2848                           ; Regs used in _displayTime: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2849                           
  2850                           
  2851                           ;main.c: 76:     char sec = getSeconds(seconds);
  2852  009B  0020               	movlb	0	; select bank0
  2853  009C  082C               	movf	displayTime@seconds+3,w
  2854  009D  00FD               	movwf	getSeconds@seconds+3
  2855  009E  082B               	movf	displayTime@seconds+2,w
  2856  009F  00FC               	movwf	getSeconds@seconds+2
  2857  00A0  082A               	movf	displayTime@seconds+1,w
  2858  00A1  00FB               	movwf	getSeconds@seconds+1
  2859  00A2  0829               	movf	displayTime@seconds,w
  2860  00A3  00FA               	movwf	getSeconds@seconds
  2861  00A4  3185  25BA  3180   	fcall	_getSeconds
  2862  00A7  0020               	movlb	0	; select bank0
  2863  00A8  00AE               	movwf	??_displayTime
  2864  00A9  082E               	movf	??_displayTime,w
  2865  00AA  00B3               	movwf	displayTime@sec
  2866                           
  2867                           ;main.c: 77:     char min = getMinutes(seconds);
  2868  00AB  082C               	movf	displayTime@seconds+3,w
  2869  00AC  00A3               	movwf	getMinutes@seconds+3
  2870  00AD  082B               	movf	displayTime@seconds+2,w
  2871  00AE  00A2               	movwf	getMinutes@seconds+2
  2872  00AF  082A               	movf	displayTime@seconds+1,w
  2873  00B0  00A1               	movwf	getMinutes@seconds+1
  2874  00B1  0829               	movf	displayTime@seconds,w
  2875  00B2  00A0               	movwf	getMinutes@seconds
  2876  00B3  3184  241F  3180   	fcall	_getMinutes
  2877  00B6  0020               	movlb	0	; select bank0
  2878  00B7  00AE               	movwf	??_displayTime
  2879  00B8  082E               	movf	??_displayTime,w
  2880  00B9  00B4               	movwf	displayTime@min
  2881                           
  2882                           ;main.c: 78:     char hrs = getHours(seconds);
  2883  00BA  082C               	movf	displayTime@seconds+3,w
  2884  00BB  00A3               	movwf	getHours@seconds+3
  2885  00BC  082B               	movf	displayTime@seconds+2,w
  2886  00BD  00A2               	movwf	getHours@seconds+2
  2887  00BE  082A               	movf	displayTime@seconds+1,w
  2888  00BF  00A1               	movwf	getHours@seconds+1
  2889  00C0  0829               	movf	displayTime@seconds,w
  2890  00C1  00A0               	movwf	getHours@seconds
  2891  00C2  3183  23B6  3180   	fcall	_getHours
  2892  00C5  0020               	movlb	0	; select bank0
  2893  00C6  00AE               	movwf	??_displayTime
  2894  00C7  082E               	movf	??_displayTime,w
  2895  00C8  00B5               	movwf	displayTime@hrs
  2896                           
  2897                           ;main.c: 80:     setCursor(0);
  2898  00C9  3000               	movlw	0
  2899  00CA  3185  251E  3180   	fcall	_setCursor
  2900  00CD                     i1l1513:
  2901                           
  2902                           ;main.c: 82:     display2dgtChar(hrs);
  2903  00CD  0020               	movlb	0	; select bank0
  2904  00CE  0835               	movf	displayTime@hrs,w
  2905  00CF  3182  22EE  3180   	fcall	_display2dgtChar
  2906  00D2                     i1l1515:
  2907                           
  2908                           ;main.c: 83:     addChar(hasColon ? ':' : ' ');
  2909  00D2  0020               	movlb	0	; select bank0
  2910  00D3  082D               	movf	displayTime@hasColon,w
  2911  00D4  1D03               	btfss	3,2
  2912  00D5  28D7               	goto	u112_21
  2913  00D6  28D8               	goto	u112_20
  2914  00D7                     u112_21:
  2915  00D7  28DD               	goto	i1l1519
  2916  00D8                     u112_20:
  2917  00D8                     i1l1517:
  2918  00D8  3020               	movlw	32
  2919  00D9  00AF               	movwf	_displayTime$302
  2920  00DA  3000               	movlw	0
  2921  00DB  00B0               	movwf	_displayTime$302+1
  2922  00DC  28E1               	goto	i1l1521
  2923  00DD                     i1l1519:
  2924  00DD  303A               	movlw	58
  2925  00DE  00AF               	movwf	_displayTime$302
  2926  00DF  3000               	movlw	0
  2927  00E0  00B0               	movwf	_displayTime$302+1
  2928  00E1                     i1l1521:
  2929  00E1  082F               	movf	_displayTime$302,w
  2930  00E2  3186  2616  3180   	fcall	_addChar
  2931  00E5                     i1l1523:
  2932                           
  2933                           ;main.c: 84:     display2dgtChar(min);
  2934  00E5  0020               	movlb	0	; select bank0
  2935  00E6  0834               	movf	displayTime@min,w
  2936  00E7  3182  22EE  3180   	fcall	_display2dgtChar
  2937  00EA                     i1l1525:
  2938                           
  2939                           ;main.c: 85:     addChar(hasColon ? ':' : ' ');
  2940  00EA  0020               	movlb	0	; select bank0
  2941  00EB  082D               	movf	displayTime@hasColon,w
  2942  00EC  1D03               	btfss	3,2
  2943  00ED  28EF               	goto	u113_21
  2944  00EE  28F0               	goto	u113_20
  2945  00EF                     u113_21:
  2946  00EF  28F5               	goto	i1l1529
  2947  00F0                     u113_20:
  2948  00F0                     i1l1527:
  2949  00F0  3020               	movlw	32
  2950  00F1  00B1               	movwf	_displayTime$303
  2951  00F2  3000               	movlw	0
  2952  00F3  00B2               	movwf	_displayTime$303+1
  2953  00F4  28F9               	goto	i1l1531
  2954  00F5                     i1l1529:
  2955  00F5  303A               	movlw	58
  2956  00F6  00B1               	movwf	_displayTime$303
  2957  00F7  3000               	movlw	0
  2958  00F8  00B2               	movwf	_displayTime$303+1
  2959  00F9                     i1l1531:
  2960  00F9  0831               	movf	_displayTime$303,w
  2961  00FA  3186  2616  3180   	fcall	_addChar
  2962  00FD                     i1l1533:
  2963                           
  2964                           ;main.c: 86:     display2dgtChar(sec);
  2965  00FD  0020               	movlb	0	; select bank0
  2966  00FE  0833               	movf	displayTime@sec,w
  2967  00FF  3182  22EE  3180   	fcall	_display2dgtChar
  2968  0102                     i1l71:
  2969  0102  0008               	return
  2970  0103                     __end_of_displayTime:
  2971                           
  2972                           	psect	text17
  2973  05BA                     __ptext17:	
  2974 ;; *************** function _getSeconds *****************
  2975 ;; Defined at:
  2976 ;;		line 47 in file "main.c"
  2977 ;; Parameters:    Size  Location     Type
  2978 ;;  seconds         4   10[COMMON] unsigned long 
  2979 ;; Auto vars:     Size  Location     Type
  2980 ;;		None
  2981 ;; Return value:  Size  Location     Type
  2982 ;;                  1    wreg      unsigned char 
  2983 ;; Registers used:
  2984 ;;		wreg, status,2, status,0, pclath, cstack
  2985 ;; Tracked objects:
  2986 ;;		On entry : 0/0
  2987 ;;		On exit  : 0/0
  2988 ;;		Unchanged: 0/0
  2989 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2990 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2991 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2992 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2993 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2994 ;;Total ram usage:        4 bytes
  2995 ;; Hardware stack levels used: 1
  2996 ;; Hardware stack levels required when called: 1
  2997 ;; This function calls:
  2998 ;;		___llmod
  2999 ;; This function is called by:
  3000 ;;		_displayTime
  3001 ;; This function uses a non-reentrant model
  3002 ;;
  3003                           
  3004                           
  3005                           ;psect for function _getSeconds
  3006  05BA                     _getSeconds:
  3007  05BA                     i1l1473:	
  3008                           ;incstack = 0
  3009                           ; Regs used in _getSeconds: [wreg+status,2+status,0+pclath+cstack]
  3010                           
  3011                           
  3012                           ;main.c: 48:     return (char) (seconds % 60);
  3013  05BA  3000               	movlw	0
  3014  05BB  00F3               	movwf	___llmod@divisor+3
  3015  05BC  3000               	movlw	0
  3016  05BD  00F2               	movwf	___llmod@divisor+2
  3017  05BE  3000               	movlw	0
  3018  05BF  00F1               	movwf	___llmod@divisor+1
  3019  05C0  303C               	movlw	60
  3020  05C1  00F0               	movwf	___llmod@divisor
  3021  05C2  087D               	movf	getSeconds@seconds+3,w
  3022  05C3  00F7               	movwf	___llmod@dividend+3
  3023  05C4  087C               	movf	getSeconds@seconds+2,w
  3024  05C5  00F6               	movwf	___llmod@dividend+2
  3025  05C6  087B               	movf	getSeconds@seconds+1,w
  3026  05C7  00F5               	movwf	___llmod@dividend+1
  3027  05C8  087A               	movf	getSeconds@seconds,w
  3028  05C9  00F4               	movwf	___llmod@dividend
  3029  05CA  3182  22A4  3185   	fcall	___llmod
  3030  05CD  0870               	movf	?___llmod,w
  3031  05CE                     i1l47:
  3032  05CE  0008               	return
  3033  05CF                     __end_of_getSeconds:
  3034                           
  3035                           	psect	text18
  3036  041F                     __ptext18:	
  3037 ;; *************** function _getMinutes *****************
  3038 ;; Defined at:
  3039 ;;		line 51 in file "main.c"
  3040 ;; Parameters:    Size  Location     Type
  3041 ;;  seconds         4    0[BANK0 ] unsigned long 
  3042 ;; Auto vars:     Size  Location     Type
  3043 ;;		None
  3044 ;; Return value:  Size  Location     Type
  3045 ;;                  1    wreg      unsigned char 
  3046 ;; Registers used:
  3047 ;;		wreg, status,2, status,0, pclath, cstack
  3048 ;; Tracked objects:
  3049 ;;		On entry : 0/0
  3050 ;;		On exit  : 0/0
  3051 ;;		Unchanged: 0/0
  3052 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3053 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3054 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3055 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3056 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3057 ;;Total ram usage:        4 bytes
  3058 ;; Hardware stack levels used: 1
  3059 ;; Hardware stack levels required when called: 1
  3060 ;; This function calls:
  3061 ;;		___lldiv
  3062 ;;		___llmod
  3063 ;; This function is called by:
  3064 ;;		_displayTime
  3065 ;; This function uses a non-reentrant model
  3066 ;;
  3067                           
  3068                           
  3069                           ;psect for function _getMinutes
  3070  041F                     _getMinutes:
  3071  041F                     i1l1477:	
  3072                           ;incstack = 0
  3073                           ; Regs used in _getMinutes: [wreg+status,2+status,0+pclath+cstack]
  3074                           
  3075                           
  3076                           ;main.c: 52:     seconds /= 60;
  3077  041F  3000               	movlw	0
  3078  0420  00F3               	movwf	___lldiv@divisor+3
  3079  0421  3000               	movlw	0
  3080  0422  00F2               	movwf	___lldiv@divisor+2
  3081  0423  3000               	movlw	0
  3082  0424  00F1               	movwf	___lldiv@divisor+1
  3083  0425  303C               	movlw	60
  3084  0426  00F0               	movwf	___lldiv@divisor
  3085  0427  0020               	movlb	0	; select bank0
  3086  0428  0823               	movf	getMinutes@seconds+3,w
  3087  0429  00F7               	movwf	___lldiv@dividend+3
  3088  042A  0822               	movf	getMinutes@seconds+2,w
  3089  042B  00F6               	movwf	___lldiv@dividend+2
  3090  042C  0821               	movf	getMinutes@seconds+1,w
  3091  042D  00F5               	movwf	___lldiv@dividend+1
  3092  042E  0820               	movf	getMinutes@seconds,w
  3093  042F  00F4               	movwf	___lldiv@dividend
  3094  0430  3181  2162  3184   	fcall	___lldiv
  3095  0433  0873               	movf	?___lldiv+3,w
  3096  0434  0020               	movlb	0	; select bank0
  3097  0435  00A3               	movwf	getMinutes@seconds+3
  3098  0436  0872               	movf	?___lldiv+2,w
  3099  0437  00A2               	movwf	getMinutes@seconds+2
  3100  0438  0871               	movf	?___lldiv+1,w
  3101  0439  00A1               	movwf	getMinutes@seconds+1
  3102  043A  0870               	movf	?___lldiv,w
  3103  043B  00A0               	movwf	getMinutes@seconds
  3104                           
  3105                           ;main.c: 53:     return (char) (seconds % 60);
  3106  043C  3000               	movlw	0
  3107  043D  00F3               	movwf	___llmod@divisor+3
  3108  043E  3000               	movlw	0
  3109  043F  00F2               	movwf	___llmod@divisor+2
  3110  0440  3000               	movlw	0
  3111  0441  00F1               	movwf	___llmod@divisor+1
  3112  0442  303C               	movlw	60
  3113  0443  00F0               	movwf	___llmod@divisor
  3114  0444  0823               	movf	getMinutes@seconds+3,w
  3115  0445  00F7               	movwf	___llmod@dividend+3
  3116  0446  0822               	movf	getMinutes@seconds+2,w
  3117  0447  00F6               	movwf	___llmod@dividend+2
  3118  0448  0821               	movf	getMinutes@seconds+1,w
  3119  0449  00F5               	movwf	___llmod@dividend+1
  3120  044A  0820               	movf	getMinutes@seconds,w
  3121  044B  00F4               	movwf	___llmod@dividend
  3122  044C  3182  22A4  3184   	fcall	___llmod
  3123  044F  0870               	movf	?___llmod,w
  3124  0450                     i1l50:
  3125  0450  0008               	return
  3126  0451                     __end_of_getMinutes:
  3127                           
  3128                           	psect	text19
  3129  02A4                     __ptext19:	
  3130 ;; *************** function ___llmod *****************
  3131 ;; Defined at:
  3132 ;;		line 5 in file "/opt/microchip/xc8/v2.32/pic/sources/c99/common/llmod.c"
  3133 ;; Parameters:    Size  Location     Type
  3134 ;;  divisor         4    0[COMMON] unsigned long 
  3135 ;;  dividend        4    4[COMMON] unsigned long 
  3136 ;; Auto vars:     Size  Location     Type
  3137 ;;  counter         1    9[COMMON] unsigned char 
  3138 ;; Return value:  Size  Location     Type
  3139 ;;                  4    0[COMMON] unsigned long 
  3140 ;; Registers used:
  3141 ;;		wreg, status,2, status,0
  3142 ;; Tracked objects:
  3143 ;;		On entry : 0/0
  3144 ;;		On exit  : 0/0
  3145 ;;		Unchanged: 0/0
  3146 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3147 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3148 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3149 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3150 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3151 ;;Total ram usage:       10 bytes
  3152 ;; Hardware stack levels used: 1
  3153 ;; This function calls:
  3154 ;;		Nothing
  3155 ;; This function is called by:
  3156 ;;		_getSeconds
  3157 ;;		_getMinutes
  3158 ;; This function uses a non-reentrant model
  3159 ;;
  3160                           
  3161                           
  3162                           ;psect for function ___llmod
  3163  02A4                     ___llmod:
  3164  02A4                     i1l1453:	
  3165                           ;incstack = 0
  3166                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  3167                           
  3168  02A4  0873               	movf	___llmod@divisor+3,w
  3169  02A5  0472               	iorwf	___llmod@divisor+2,w
  3170  02A6  0471               	iorwf	___llmod@divisor+1,w
  3171  02A7  0470               	iorwf	___llmod@divisor,w
  3172  02A8  1903               	skipnz
  3173  02A9  2AAB               	goto	u103_21
  3174  02AA  2AAC               	goto	u103_20
  3175  02AB                     u103_21:
  3176  02AB  2AE5               	goto	i1l1469
  3177  02AC                     u103_20:
  3178  02AC                     i1l1455:
  3179  02AC  01F9               	clrf	___llmod@counter
  3180  02AD  0AF9               	incf	___llmod@counter,f
  3181  02AE  2ABA               	goto	i1l1459
  3182  02AF                     i1l1457:
  3183  02AF  3001               	movlw	1
  3184  02B0                     u104_25:
  3185  02B0  35F0               	lslf	___llmod@divisor,f
  3186  02B1  0DF1               	rlf	___llmod@divisor+1,f
  3187  02B2  0DF2               	rlf	___llmod@divisor+2,f
  3188  02B3  0DF3               	rlf	___llmod@divisor+3,f
  3189  02B4  0B89               	decfsz	9,f
  3190  02B5  2AB0               	goto	u104_25
  3191  02B6  3001               	movlw	1
  3192  02B7  00F8               	movwf	??___llmod
  3193  02B8  0878               	movf	??___llmod,w
  3194  02B9  07F9               	addwf	___llmod@counter,f
  3195  02BA                     i1l1459:
  3196  02BA  1FF3               	btfss	___llmod@divisor+3,7
  3197  02BB  2ABD               	goto	u105_21
  3198  02BC  2ABE               	goto	u105_20
  3199  02BD                     u105_21:
  3200  02BD  2AAF               	goto	i1l1457
  3201  02BE                     u105_20:
  3202  02BE                     i1l1461:
  3203  02BE  0873               	movf	___llmod@divisor+3,w
  3204  02BF  0277               	subwf	___llmod@dividend+3,w
  3205  02C0  1D03               	skipz
  3206  02C1  2ACC               	goto	u106_25
  3207  02C2  0872               	movf	___llmod@divisor+2,w
  3208  02C3  0276               	subwf	___llmod@dividend+2,w
  3209  02C4  1D03               	skipz
  3210  02C5  2ACC               	goto	u106_25
  3211  02C6  0871               	movf	___llmod@divisor+1,w
  3212  02C7  0275               	subwf	___llmod@dividend+1,w
  3213  02C8  1D03               	skipz
  3214  02C9  2ACC               	goto	u106_25
  3215  02CA  0870               	movf	___llmod@divisor,w
  3216  02CB  0274               	subwf	___llmod@dividend,w
  3217  02CC                     u106_25:
  3218  02CC  1C03               	skipc
  3219  02CD  2ACF               	goto	u106_21
  3220  02CE  2AD0               	goto	u106_20
  3221  02CF                     u106_21:
  3222  02CF  2AD8               	goto	i1l1465
  3223  02D0                     u106_20:
  3224  02D0                     i1l1463:
  3225  02D0  0870               	movf	___llmod@divisor,w
  3226  02D1  02F4               	subwf	___llmod@dividend,f
  3227  02D2  0871               	movf	___llmod@divisor+1,w
  3228  02D3  3BF5               	subwfb	___llmod@dividend+1,f
  3229  02D4  0872               	movf	___llmod@divisor+2,w
  3230  02D5  3BF6               	subwfb	___llmod@dividend+2,f
  3231  02D6  0873               	movf	___llmod@divisor+3,w
  3232  02D7  3BF7               	subwfb	___llmod@dividend+3,f
  3233  02D8                     i1l1465:
  3234  02D8  3001               	movlw	1
  3235  02D9                     u107_25:
  3236  02D9  36F3               	lsrf	___llmod@divisor+3,f
  3237  02DA  0CF2               	rrf	___llmod@divisor+2,f
  3238  02DB  0CF1               	rrf	___llmod@divisor+1,f
  3239  02DC  0CF0               	rrf	___llmod@divisor,f
  3240  02DD  0B89               	decfsz	9,f
  3241  02DE  2AD9               	goto	u107_25
  3242  02DF                     i1l1467:
  3243  02DF  3001               	movlw	1
  3244  02E0  02F9               	subwf	___llmod@counter,f
  3245  02E1  1D03               	btfss	3,2
  3246  02E2  2AE4               	goto	u108_21
  3247  02E3  2AE5               	goto	u108_20
  3248  02E4                     u108_21:
  3249  02E4  2ABE               	goto	i1l1461
  3250  02E5                     u108_20:
  3251  02E5                     i1l1469:
  3252  02E5  0877               	movf	___llmod@dividend+3,w
  3253  02E6  00F3               	movwf	?___llmod+3
  3254  02E7  0876               	movf	___llmod@dividend+2,w
  3255  02E8  00F2               	movwf	?___llmod+2
  3256  02E9  0875               	movf	___llmod@dividend+1,w
  3257  02EA  00F1               	movwf	?___llmod+1
  3258  02EB  0874               	movf	___llmod@dividend,w
  3259  02EC  00F0               	movwf	?___llmod
  3260  02ED                     i1l593:
  3261  02ED  0008               	return
  3262  02EE                     __end_of___llmod:
  3263                           
  3264                           	psect	text20
  3265  03B6                     __ptext20:	
  3266 ;; *************** function _getHours *****************
  3267 ;; Defined at:
  3268 ;;		line 56 in file "main.c"
  3269 ;; Parameters:    Size  Location     Type
  3270 ;;  seconds         4    0[BANK0 ] unsigned long 
  3271 ;; Auto vars:     Size  Location     Type
  3272 ;;		None
  3273 ;; Return value:  Size  Location     Type
  3274 ;;                  1    wreg      unsigned char 
  3275 ;; Registers used:
  3276 ;;		wreg, status,2, status,0, pclath, cstack
  3277 ;; Tracked objects:
  3278 ;;		On entry : 0/0
  3279 ;;		On exit  : 0/0
  3280 ;;		Unchanged: 0/0
  3281 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3282 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3283 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3284 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3285 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3286 ;;Total ram usage:        4 bytes
  3287 ;; Hardware stack levels used: 1
  3288 ;; Hardware stack levels required when called: 1
  3289 ;; This function calls:
  3290 ;;		___lldiv
  3291 ;; This function is called by:
  3292 ;;		_displayTime
  3293 ;; This function uses a non-reentrant model
  3294 ;;
  3295                           
  3296                           
  3297                           ;psect for function _getHours
  3298  03B6                     _getHours:
  3299  03B6                     i1l1481:	
  3300                           ;incstack = 0
  3301                           ; Regs used in _getHours: [wreg+status,2+status,0+pclath+cstack]
  3302                           
  3303                           
  3304                           ;main.c: 57:     seconds /= (60 * 60);
  3305  03B6  3000               	movlw	0
  3306  03B7  00F3               	movwf	___lldiv@divisor+3
  3307  03B8  3000               	movlw	0
  3308  03B9  00F2               	movwf	___lldiv@divisor+2
  3309  03BA  300E               	movlw	14
  3310  03BB  00F1               	movwf	___lldiv@divisor+1
  3311  03BC  3010               	movlw	16
  3312  03BD  00F0               	movwf	___lldiv@divisor
  3313  03BE  0020               	movlb	0	; select bank0
  3314  03BF  0823               	movf	getHours@seconds+3,w
  3315  03C0  00F7               	movwf	___lldiv@dividend+3
  3316  03C1  0822               	movf	getHours@seconds+2,w
  3317  03C2  00F6               	movwf	___lldiv@dividend+2
  3318  03C3  0821               	movf	getHours@seconds+1,w
  3319  03C4  00F5               	movwf	___lldiv@dividend+1
  3320  03C5  0820               	movf	getHours@seconds,w
  3321  03C6  00F4               	movwf	___lldiv@dividend
  3322  03C7  3181  2162  3183   	fcall	___lldiv
  3323  03CA  0873               	movf	?___lldiv+3,w
  3324  03CB  0020               	movlb	0	; select bank0
  3325  03CC  00A3               	movwf	getHours@seconds+3
  3326  03CD  0872               	movf	?___lldiv+2,w
  3327  03CE  00A2               	movwf	getHours@seconds+2
  3328  03CF  0871               	movf	?___lldiv+1,w
  3329  03D0  00A1               	movwf	getHours@seconds+1
  3330  03D1  0870               	movf	?___lldiv,w
  3331  03D2  00A0               	movwf	getHours@seconds
  3332  03D3                     i1l1483:
  3333                           
  3334                           ;main.c: 58:     if (seconds > 255)
  3335  03D3  0823               	movf	getHours@seconds+3,w
  3336  03D4  1D03               	btfss	3,2
  3337  03D5  2BDF               	goto	u109_20
  3338  03D6  0822               	movf	getHours@seconds+2,w
  3339  03D7  1D03               	btfss	3,2
  3340  03D8  2BDF               	goto	u109_20
  3341  03D9  3001               	movlw	1
  3342  03DA  0221               	subwf	getHours@seconds+1,w
  3343  03DB  1C03               	btfss	3,0
  3344  03DC  2BDE               	goto	u109_21
  3345  03DD  2BDF               	goto	u109_20
  3346  03DE                     u109_21:
  3347  03DE  2BE8               	goto	i1l53
  3348  03DF                     u109_20:
  3349  03DF                     i1l1485:
  3350                           
  3351                           ;main.c: 59:         seconds = 255;
  3352  03DF  3000               	movlw	0
  3353  03E0  0020               	movlb	0	; select bank0
  3354  03E1  00A3               	movwf	getHours@seconds+3
  3355  03E2  3000               	movlw	0
  3356  03E3  00A2               	movwf	getHours@seconds+2
  3357  03E4  3000               	movlw	0
  3358  03E5  00A1               	movwf	getHours@seconds+1
  3359  03E6  30FF               	movlw	255
  3360  03E7  00A0               	movwf	getHours@seconds
  3361  03E8                     i1l53:
  3362                           
  3363                           ;main.c: 60:     return (char) seconds;
  3364  03E8  0020               	movlb	0	; select bank0
  3365  03E9  0820               	movf	getHours@seconds,w
  3366  03EA                     i1l54:
  3367  03EA  0008               	return
  3368  03EB                     __end_of_getHours:
  3369                           
  3370                           	psect	text21
  3371  0162                     __ptext21:	
  3372 ;; *************** function ___lldiv *****************
  3373 ;; Defined at:
  3374 ;;		line 5 in file "/opt/microchip/xc8/v2.32/pic/sources/c99/common/__lldiv.c"
  3375 ;; Parameters:    Size  Location     Type
  3376 ;;  divisor         4    0[COMMON] unsigned long 
  3377 ;;  dividend        4    4[COMMON] unsigned long 
  3378 ;; Auto vars:     Size  Location     Type
  3379 ;;  quotient        4    9[COMMON] unsigned long 
  3380 ;;  counter         1   13[COMMON] unsigned char 
  3381 ;; Return value:  Size  Location     Type
  3382 ;;                  4    0[COMMON] unsigned long 
  3383 ;; Registers used:
  3384 ;;		wreg, status,2, status,0
  3385 ;; Tracked objects:
  3386 ;;		On entry : 0/0
  3387 ;;		On exit  : 0/0
  3388 ;;		Unchanged: 0/0
  3389 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3390 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3391 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3392 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3393 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3394 ;;Total ram usage:       14 bytes
  3395 ;; Hardware stack levels used: 1
  3396 ;; This function calls:
  3397 ;;		Nothing
  3398 ;; This function is called by:
  3399 ;;		_getMinutes
  3400 ;;		_getHours
  3401 ;; This function uses a non-reentrant model
  3402 ;;
  3403                           
  3404                           
  3405                           ;psect for function ___lldiv
  3406  0162                     ___lldiv:
  3407  0162                     i1l1347:	
  3408                           ;incstack = 0
  3409                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  3410                           
  3411  0162  3000               	movlw	0
  3412  0163  00FC               	movwf	___lldiv@quotient+3
  3413  0164  3000               	movlw	0
  3414  0165  00FB               	movwf	___lldiv@quotient+2
  3415  0166  3000               	movlw	0
  3416  0167  00FA               	movwf	___lldiv@quotient+1
  3417  0168  3000               	movlw	0
  3418  0169  00F9               	movwf	___lldiv@quotient
  3419  016A  0873               	movf	___lldiv@divisor+3,w
  3420  016B  0472               	iorwf	___lldiv@divisor+2,w
  3421  016C  0471               	iorwf	___lldiv@divisor+1,w
  3422  016D  0470               	iorwf	___lldiv@divisor,w
  3423  016E  1903               	skipnz
  3424  016F  2971               	goto	u77_21
  3425  0170  2972               	goto	u77_20
  3426  0171                     u77_21:
  3427  0171  29B3               	goto	i1l1367
  3428  0172                     u77_20:
  3429  0172                     i1l1349:
  3430  0172  01FD               	clrf	___lldiv@counter
  3431  0173  0AFD               	incf	___lldiv@counter,f
  3432  0174  2980               	goto	i1l1353
  3433  0175                     i1l1351:
  3434  0175  3001               	movlw	1
  3435  0176                     u78_25:
  3436  0176  35F0               	lslf	___lldiv@divisor,f
  3437  0177  0DF1               	rlf	___lldiv@divisor+1,f
  3438  0178  0DF2               	rlf	___lldiv@divisor+2,f
  3439  0179  0DF3               	rlf	___lldiv@divisor+3,f
  3440  017A  0B89               	decfsz	9,f
  3441  017B  2976               	goto	u78_25
  3442  017C  3001               	movlw	1
  3443  017D  00F8               	movwf	??___lldiv
  3444  017E  0878               	movf	??___lldiv,w
  3445  017F  07FD               	addwf	___lldiv@counter,f
  3446  0180                     i1l1353:
  3447  0180  1FF3               	btfss	___lldiv@divisor+3,7
  3448  0181  2983               	goto	u79_21
  3449  0182  2984               	goto	u79_20
  3450  0183                     u79_21:
  3451  0183  2975               	goto	i1l1351
  3452  0184                     u79_20:
  3453  0184                     i1l1355:
  3454  0184  3001               	movlw	1
  3455  0185                     u80_25:
  3456  0185  35F9               	lslf	___lldiv@quotient,f
  3457  0186  0DFA               	rlf	___lldiv@quotient+1,f
  3458  0187  0DFB               	rlf	___lldiv@quotient+2,f
  3459  0188  0DFC               	rlf	___lldiv@quotient+3,f
  3460  0189  0B89               	decfsz	9,f
  3461  018A  2985               	goto	u80_25
  3462  018B                     i1l1357:
  3463  018B  0873               	movf	___lldiv@divisor+3,w
  3464  018C  0277               	subwf	___lldiv@dividend+3,w
  3465  018D  1D03               	skipz
  3466  018E  2999               	goto	u81_25
  3467  018F  0872               	movf	___lldiv@divisor+2,w
  3468  0190  0276               	subwf	___lldiv@dividend+2,w
  3469  0191  1D03               	skipz
  3470  0192  2999               	goto	u81_25
  3471  0193  0871               	movf	___lldiv@divisor+1,w
  3472  0194  0275               	subwf	___lldiv@dividend+1,w
  3473  0195  1D03               	skipz
  3474  0196  2999               	goto	u81_25
  3475  0197  0870               	movf	___lldiv@divisor,w
  3476  0198  0274               	subwf	___lldiv@dividend,w
  3477  0199                     u81_25:
  3478  0199  1C03               	skipc
  3479  019A  299C               	goto	u81_21
  3480  019B  299D               	goto	u81_20
  3481  019C                     u81_21:
  3482  019C  29A6               	goto	i1l1363
  3483  019D                     u81_20:
  3484  019D                     i1l1359:
  3485  019D  0870               	movf	___lldiv@divisor,w
  3486  019E  02F4               	subwf	___lldiv@dividend,f
  3487  019F  0871               	movf	___lldiv@divisor+1,w
  3488  01A0  3BF5               	subwfb	___lldiv@dividend+1,f
  3489  01A1  0872               	movf	___lldiv@divisor+2,w
  3490  01A2  3BF6               	subwfb	___lldiv@dividend+2,f
  3491  01A3  0873               	movf	___lldiv@divisor+3,w
  3492  01A4  3BF7               	subwfb	___lldiv@dividend+3,f
  3493  01A5                     i1l1361:
  3494  01A5  1479               	bsf	___lldiv@quotient,0
  3495  01A6                     i1l1363:
  3496  01A6  3001               	movlw	1
  3497  01A7                     u82_25:
  3498  01A7  36F3               	lsrf	___lldiv@divisor+3,f
  3499  01A8  0CF2               	rrf	___lldiv@divisor+2,f
  3500  01A9  0CF1               	rrf	___lldiv@divisor+1,f
  3501  01AA  0CF0               	rrf	___lldiv@divisor,f
  3502  01AB  0B89               	decfsz	9,f
  3503  01AC  29A7               	goto	u82_25
  3504  01AD                     i1l1365:
  3505  01AD  3001               	movlw	1
  3506  01AE  02FD               	subwf	___lldiv@counter,f
  3507  01AF  1D03               	btfss	3,2
  3508  01B0  29B2               	goto	u83_21
  3509  01B1  29B3               	goto	u83_20
  3510  01B2                     u83_21:
  3511  01B2  2984               	goto	i1l1355
  3512  01B3                     u83_20:
  3513  01B3                     i1l1367:
  3514  01B3  087C               	movf	___lldiv@quotient+3,w
  3515  01B4  00F3               	movwf	?___lldiv+3
  3516  01B5  087B               	movf	___lldiv@quotient+2,w
  3517  01B6  00F2               	movwf	?___lldiv+2
  3518  01B7  087A               	movf	___lldiv@quotient+1,w
  3519  01B8  00F1               	movwf	?___lldiv+1
  3520  01B9  0879               	movf	___lldiv@quotient,w
  3521  01BA  00F0               	movwf	?___lldiv
  3522  01BB                     i1l399:
  3523  01BB  0008               	return
  3524  01BC                     __end_of___lldiv:
  3525                           
  3526                           	psect	text22
  3527  02EE                     __ptext22:	
  3528 ;; *************** function _display2dgtChar *****************
  3529 ;; Defined at:
  3530 ;;		line 63 in file "main.c"
  3531 ;; Parameters:    Size  Location     Type
  3532 ;;  input           1    wreg     unsigned char 
  3533 ;; Auto vars:     Size  Location     Type
  3534 ;;  input           1    7[BANK0 ] unsigned char 
  3535 ;;  buf             3    3[BANK0 ] unsigned char [3]
  3536 ;;  msd             1    8[BANK0 ] unsigned char 
  3537 ;;  lsd             1    6[BANK0 ] unsigned char 
  3538 ;; Return value:  Size  Location     Type
  3539 ;;                  1    wreg      void 
  3540 ;; Registers used:
  3541 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3542 ;; Tracked objects:
  3543 ;;		On entry : 0/0
  3544 ;;		On exit  : 0/0
  3545 ;;		Unchanged: 0/0
  3546 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3547 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3548 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3549 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3550 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3551 ;;Total ram usage:        9 bytes
  3552 ;; Hardware stack levels used: 1
  3553 ;; Hardware stack levels required when called: 7
  3554 ;; This function calls:
  3555 ;;		___awdiv
  3556 ;;		___awmod
  3557 ;;		_addText
  3558 ;; This function is called by:
  3559 ;;		_displayTime
  3560 ;; This function uses a non-reentrant model
  3561 ;;
  3562                           
  3563                           
  3564                           ;psect for function _display2dgtChar
  3565  02EE                     _display2dgtChar:
  3566                           
  3567                           ;incstack = 0
  3568 ;; hardware stack exceeded
  3569                           ; Regs used in _display2dgtChar: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3570                           ;display2dgtChar@input stored from wreg
  3571  02EE  0020               	movlb	0	; select bank0
  3572  02EF  00A7               	movwf	display2dgtChar@input
  3573  02F0                     i1l1489:
  3574                           
  3575                           ;main.c: 64:     char buf[3] = "  ";
  3576  02F0  084F               	movf	display2dgtChar@F2598,w
  3577  02F1  00A3               	movwf	display2dgtChar@buf
  3578  02F2  0850               	movf	display2dgtChar@F2598+1,w
  3579  02F3  00A4               	movwf	display2dgtChar@buf+1
  3580  02F4  0851               	movf	display2dgtChar@F2598+2,w
  3581  02F5  00A5               	movwf	display2dgtChar@buf+2
  3582  02F6                     i1l1491:
  3583                           
  3584                           ;main.c: 65:     char lsd = input % 10;
  3585  02F6  300A               	movlw	10
  3586  02F7  00F0               	movwf	___awmod@divisor
  3587  02F8  3000               	movlw	0
  3588  02F9  00F1               	movwf	___awmod@divisor+1
  3589  02FA  0827               	movf	display2dgtChar@input,w
  3590  02FB  00A0               	movwf	??_display2dgtChar
  3591  02FC  01A1               	clrf	??_display2dgtChar+1
  3592  02FD  0820               	movf	??_display2dgtChar,w
  3593  02FE  00F2               	movwf	___awmod@dividend
  3594  02FF  0821               	movf	??_display2dgtChar+1,w
  3595  0300  00F3               	movwf	___awmod@dividend+1
  3596  0301  3181  21BC  3182   	fcall	___awmod
  3597  0304  0870               	movf	?___awmod,w
  3598  0305  0020               	movlb	0	; select bank0
  3599  0306  00A2               	movwf	??_display2dgtChar+2
  3600  0307  0822               	movf	??_display2dgtChar+2,w
  3601  0308  00A6               	movwf	display2dgtChar@lsd
  3602  0309                     i1l1493:
  3603                           
  3604                           ;main.c: 66:     char msd = input / 10;
  3605  0309  300A               	movlw	10
  3606  030A  00F0               	movwf	___awdiv@divisor
  3607  030B  3000               	movlw	0
  3608  030C  00F1               	movwf	___awdiv@divisor+1
  3609  030D  0827               	movf	display2dgtChar@input,w
  3610  030E  00A0               	movwf	??_display2dgtChar
  3611  030F  01A1               	clrf	??_display2dgtChar+1
  3612  0310  0820               	movf	??_display2dgtChar,w
  3613  0311  00F2               	movwf	___awdiv@dividend
  3614  0312  0821               	movf	??_display2dgtChar+1,w
  3615  0313  00F3               	movwf	___awdiv@dividend+1
  3616  0314  3181  2103  3182   	fcall	___awdiv
  3617  0317  0870               	movf	?___awdiv,w
  3618  0318  0020               	movlb	0	; select bank0
  3619  0319  00A2               	movwf	??_display2dgtChar+2
  3620  031A  0822               	movf	??_display2dgtChar+2,w
  3621  031B  00A8               	movwf	display2dgtChar@msd
  3622                           
  3623                           ;main.c: 67:     if (msd > 9) msd = 9;
  3624  031C  300A               	movlw	10
  3625  031D  0228               	subwf	display2dgtChar@msd,w
  3626  031E  1C03               	skipc
  3627  031F  2B21               	goto	u110_21
  3628  0320  2B22               	goto	u110_20
  3629  0321                     u110_21:
  3630  0321  2B26               	goto	i1l1497
  3631  0322                     u110_20:
  3632  0322                     i1l1495:
  3633  0322  3009               	movlw	9
  3634  0323  00A0               	movwf	??_display2dgtChar
  3635  0324  0820               	movf	??_display2dgtChar,w
  3636  0325  00A8               	movwf	display2dgtChar@msd
  3637  0326                     i1l1497:
  3638                           
  3639                           ;main.c: 69:     buf[0] = '0' + msd;
  3640  0326  0828               	movf	display2dgtChar@msd,w
  3641  0327  3E30               	addlw	48
  3642  0328  00A0               	movwf	??_display2dgtChar
  3643  0329  0820               	movf	??_display2dgtChar,w
  3644  032A  00A3               	movwf	display2dgtChar@buf
  3645  032B                     i1l1499:
  3646                           
  3647                           ;main.c: 70:     buf[1] = '0' + lsd;
  3648  032B  0826               	movf	display2dgtChar@lsd,w
  3649  032C  3E30               	addlw	48
  3650  032D  00A0               	movwf	??_display2dgtChar
  3651  032E  0820               	movf	??_display2dgtChar,w
  3652  032F  00A4               	movwf	display2dgtChar@buf+1
  3653  0330                     i1l1501:
  3654                           
  3655                           ;main.c: 72:     addText(buf);
  3656  0330  3023               	movlw	(low (display2dgtChar@buf| 0))& (0+255)
  3657  0331  3185  253E  3182   	fcall	_addText
  3658  0334                     i1l60:
  3659  0334  0008               	return
  3660  0335                     __end_of_display2dgtChar:
  3661                           
  3662                           	psect	text23
  3663  053E                     __ptext23:	
  3664 ;; *************** function _addText *****************
  3665 ;; Defined at:
  3666 ;;		line 74 in file "display.c"
  3667 ;; Parameters:    Size  Location     Type
  3668 ;;  txt             1    wreg     PTR unsigned char 
  3669 ;;		 -> display2dgtChar@buf(3), 
  3670 ;; Auto vars:     Size  Location     Type
  3671 ;;  txt             1   13[COMMON] PTR unsigned char 
  3672 ;;		 -> display2dgtChar@buf(3), 
  3673 ;;  txtPtr          1   12[COMMON] unsigned char 
  3674 ;; Return value:  Size  Location     Type
  3675 ;;                  1    wreg      void 
  3676 ;; Registers used:
  3677 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3678 ;; Tracked objects:
  3679 ;;		On entry : 0/0
  3680 ;;		On exit  : 0/0
  3681 ;;		Unchanged: 0/0
  3682 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3683 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3684 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3685 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3686 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3687 ;;Total ram usage:        3 bytes
  3688 ;; Hardware stack levels used: 1
  3689 ;; Hardware stack levels required when called: 6
  3690 ;; This function calls:
  3691 ;;		_text
  3692 ;; This function is called by:
  3693 ;;		_display2dgtChar
  3694 ;;		_setText
  3695 ;; This function uses a non-reentrant model
  3696 ;;
  3697                           
  3698                           
  3699                           ;psect for function _addText
  3700  053E                     _addText:
  3701                           
  3702                           ;incstack = 0
  3703 ;; hardware stack exceeded
  3704                           ; Regs used in _addText: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3705                           ;addText@txt stored from wreg
  3706  053E  00FD               	movwf	addText@txt
  3707  053F                     i1l1335:
  3708                           
  3709                           ;display.c: 75:     char txtPtr = 0;
  3710  053F  01FC               	clrf	addText@txtPtr
  3711                           
  3712                           ;display.c: 76:     while (txt[txtPtr] != 0) {
  3713  0540  2D4F               	goto	i1l1341
  3714  0541                     i1l1337:
  3715                           
  3716                           ;display.c: 77:         text(txt[txtPtr++]);
  3717  0541  087C               	movf	addText@txtPtr,w
  3718  0542  077D               	addwf	addText@txt,w
  3719  0543  00FB               	movwf	??_addText
  3720  0544  087B               	movf	??_addText,w
  3721  0545  0086               	movwf	6
  3722  0546  0187               	clrf	7
  3723  0547  0801               	movf	1,w
  3724  0548  3185  2576  3185   	fcall	_text
  3725  054B                     i1l1339:
  3726  054B  3001               	movlw	1
  3727  054C  00FB               	movwf	??_addText
  3728  054D  087B               	movf	??_addText,w
  3729  054E  07FC               	addwf	addText@txtPtr,f
  3730  054F                     i1l1341:
  3731                           
  3732                           ;display.c: 76:     while (txt[txtPtr] != 0) {
  3733  054F  087C               	movf	addText@txtPtr,w
  3734  0550  077D               	addwf	addText@txt,w
  3735  0551  00FB               	movwf	??_addText
  3736  0552  087B               	movf	??_addText,w
  3737  0553  0086               	movwf	6
  3738  0554  0187               	clrf	7
  3739  0555  0801               	movf	1,w
  3740  0556  1D03               	btfss	3,2
  3741  0557  2D59               	goto	u74_21
  3742  0558  2D5A               	goto	u74_20
  3743  0559                     u74_21:
  3744  0559  2D41               	goto	i1l1337
  3745  055A                     u74_20:
  3746  055A                     i1l188:
  3747  055A  0008               	return
  3748  055B                     __end_of_addText:
  3749                           
  3750                           	psect	text24
  3751  01BC                     __ptext24:	
  3752 ;; *************** function ___awmod *****************
  3753 ;; Defined at:
  3754 ;;		line 5 in file "/opt/microchip/xc8/v2.32/pic/sources/c99/common/awmod.c"
  3755 ;; Parameters:    Size  Location     Type
  3756 ;;  divisor         2    0[COMMON] int 
  3757 ;;  dividend        2    2[COMMON] int 
  3758 ;; Auto vars:     Size  Location     Type
  3759 ;;  sign            1    6[COMMON] unsigned char 
  3760 ;;  counter         1    5[COMMON] unsigned char 
  3761 ;; Return value:  Size  Location     Type
  3762 ;;                  2    0[COMMON] int 
  3763 ;; Registers used:
  3764 ;;		wreg, status,2, status,0
  3765 ;; Tracked objects:
  3766 ;;		On entry : 0/0
  3767 ;;		On exit  : 0/0
  3768 ;;		Unchanged: 0/0
  3769 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3770 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3771 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3772 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3773 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3774 ;;Total ram usage:        7 bytes
  3775 ;; Hardware stack levels used: 1
  3776 ;; This function calls:
  3777 ;;		Nothing
  3778 ;; This function is called by:
  3779 ;;		_display2dgtChar
  3780 ;; This function uses a non-reentrant model
  3781 ;;
  3782                           
  3783                           
  3784                           ;psect for function ___awmod
  3785  01BC                     ___awmod:
  3786  01BC                     i1l1415:	
  3787                           ;incstack = 0
  3788                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  3789                           
  3790  01BC  01F6               	clrf	___awmod@sign
  3791  01BD                     i1l1417:
  3792  01BD  1FF3               	btfss	___awmod@dividend+1,7
  3793  01BE  29C0               	goto	u94_21
  3794  01BF  29C1               	goto	u94_20
  3795  01C0                     u94_21:
  3796  01C0  29C8               	goto	i1l1423
  3797  01C1                     u94_20:
  3798  01C1                     i1l1419:
  3799  01C1  09F2               	comf	___awmod@dividend,f
  3800  01C2  09F3               	comf	___awmod@dividend+1,f
  3801  01C3  0AF2               	incf	___awmod@dividend,f
  3802  01C4  1903               	skipnz
  3803  01C5  0AF3               	incf	___awmod@dividend+1,f
  3804  01C6                     i1l1421:
  3805  01C6  01F6               	clrf	___awmod@sign
  3806  01C7  0AF6               	incf	___awmod@sign,f
  3807  01C8                     i1l1423:
  3808  01C8  1FF1               	btfss	___awmod@divisor+1,7
  3809  01C9  29CB               	goto	u95_21
  3810  01CA  29CC               	goto	u95_20
  3811  01CB                     u95_21:
  3812  01CB  29D1               	goto	i1l1427
  3813  01CC                     u95_20:
  3814  01CC                     i1l1425:
  3815  01CC  09F0               	comf	___awmod@divisor,f
  3816  01CD  09F1               	comf	___awmod@divisor+1,f
  3817  01CE  0AF0               	incf	___awmod@divisor,f
  3818  01CF  1903               	skipnz
  3819  01D0  0AF1               	incf	___awmod@divisor+1,f
  3820  01D1                     i1l1427:
  3821  01D1  0870               	movf	___awmod@divisor,w
  3822  01D2  0471               	iorwf	___awmod@divisor+1,w
  3823  01D3  1903               	btfsc	3,2
  3824  01D4  29D6               	goto	u96_21
  3825  01D5  29D7               	goto	u96_20
  3826  01D6                     u96_21:
  3827  01D6  2A00               	goto	i1l1445
  3828  01D7                     u96_20:
  3829  01D7                     i1l1429:
  3830  01D7  01F5               	clrf	___awmod@counter
  3831  01D8  0AF5               	incf	___awmod@counter,f
  3832  01D9  29E3               	goto	i1l1435
  3833  01DA                     i1l1431:
  3834  01DA  3001               	movlw	1
  3835  01DB                     u97_25:
  3836  01DB  35F0               	lslf	___awmod@divisor,f
  3837  01DC  0DF1               	rlf	___awmod@divisor+1,f
  3838  01DD  0B89               	decfsz	9,f
  3839  01DE  29DB               	goto	u97_25
  3840  01DF                     i1l1433:
  3841  01DF  3001               	movlw	1
  3842  01E0  00F4               	movwf	??___awmod
  3843  01E1  0874               	movf	??___awmod,w
  3844  01E2  07F5               	addwf	___awmod@counter,f
  3845  01E3                     i1l1435:
  3846  01E3  1FF1               	btfss	___awmod@divisor+1,7
  3847  01E4  29E6               	goto	u98_21
  3848  01E5  29E7               	goto	u98_20
  3849  01E6                     u98_21:
  3850  01E6  29DA               	goto	i1l1431
  3851  01E7                     u98_20:
  3852  01E7                     i1l1437:
  3853  01E7  0871               	movf	___awmod@divisor+1,w
  3854  01E8  0273               	subwf	___awmod@dividend+1,w
  3855  01E9  1D03               	skipz
  3856  01EA  29ED               	goto	u99_25
  3857  01EB  0870               	movf	___awmod@divisor,w
  3858  01EC  0272               	subwf	___awmod@dividend,w
  3859  01ED                     u99_25:
  3860  01ED  1C03               	skipc
  3861  01EE  29F0               	goto	u99_21
  3862  01EF  29F1               	goto	u99_20
  3863  01F0                     u99_21:
  3864  01F0  29F5               	goto	i1l1441
  3865  01F1                     u99_20:
  3866  01F1                     i1l1439:
  3867  01F1  0870               	movf	___awmod@divisor,w
  3868  01F2  02F2               	subwf	___awmod@dividend,f
  3869  01F3  0871               	movf	___awmod@divisor+1,w
  3870  01F4  3BF3               	subwfb	___awmod@dividend+1,f
  3871  01F5                     i1l1441:
  3872  01F5  3001               	movlw	1
  3873  01F6                     u100_25:
  3874  01F6  36F1               	lsrf	___awmod@divisor+1,f
  3875  01F7  0CF0               	rrf	___awmod@divisor,f
  3876  01F8  0B89               	decfsz	9,f
  3877  01F9  29F6               	goto	u100_25
  3878  01FA                     i1l1443:
  3879  01FA  3001               	movlw	1
  3880  01FB  02F5               	subwf	___awmod@counter,f
  3881  01FC  1D03               	btfss	3,2
  3882  01FD  29FF               	goto	u101_21
  3883  01FE  2A00               	goto	u101_20
  3884  01FF                     u101_21:
  3885  01FF  29E7               	goto	i1l1437
  3886  0200                     u101_20:
  3887  0200                     i1l1445:
  3888  0200  0876               	movf	___awmod@sign,w
  3889  0201  1903               	btfsc	3,2
  3890  0202  2A04               	goto	u102_21
  3891  0203  2A05               	goto	u102_20
  3892  0204                     u102_21:
  3893  0204  2A0A               	goto	i1l1449
  3894  0205                     u102_20:
  3895  0205                     i1l1447:
  3896  0205  09F2               	comf	___awmod@dividend,f
  3897  0206  09F3               	comf	___awmod@dividend+1,f
  3898  0207  0AF2               	incf	___awmod@dividend,f
  3899  0208  1903               	skipnz
  3900  0209  0AF3               	incf	___awmod@dividend+1,f
  3901  020A                     i1l1449:
  3902  020A  0873               	movf	___awmod@dividend+1,w
  3903  020B  00F1               	movwf	?___awmod+1
  3904  020C  0872               	movf	___awmod@dividend,w
  3905  020D  00F0               	movwf	?___awmod
  3906  020E                     i1l529:
  3907  020E  0008               	return
  3908  020F                     __end_of___awmod:
  3909                           
  3910                           	psect	text25
  3911  0103                     __ptext25:	
  3912 ;; *************** function ___awdiv *****************
  3913 ;; Defined at:
  3914 ;;		line 5 in file "/opt/microchip/xc8/v2.32/pic/sources/c99/common/awdiv.c"
  3915 ;; Parameters:    Size  Location     Type
  3916 ;;  divisor         2    0[COMMON] int 
  3917 ;;  dividend        2    2[COMMON] int 
  3918 ;; Auto vars:     Size  Location     Type
  3919 ;;  quotient        2    7[COMMON] int 
  3920 ;;  sign            1    6[COMMON] unsigned char 
  3921 ;;  counter         1    5[COMMON] unsigned char 
  3922 ;; Return value:  Size  Location     Type
  3923 ;;                  2    0[COMMON] int 
  3924 ;; Registers used:
  3925 ;;		wreg, status,2, status,0
  3926 ;; Tracked objects:
  3927 ;;		On entry : 0/0
  3928 ;;		On exit  : 0/0
  3929 ;;		Unchanged: 0/0
  3930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3931 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3932 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3933 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3934 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3935 ;;Total ram usage:        9 bytes
  3936 ;; Hardware stack levels used: 1
  3937 ;; This function calls:
  3938 ;;		Nothing
  3939 ;; This function is called by:
  3940 ;;		_display2dgtChar
  3941 ;; This function uses a non-reentrant model
  3942 ;;
  3943                           
  3944                           
  3945                           ;psect for function ___awdiv
  3946  0103                     ___awdiv:
  3947  0103                     i1l1371:	
  3948                           ;incstack = 0
  3949                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  3950                           
  3951  0103  01F6               	clrf	___awdiv@sign
  3952  0104                     i1l1373:
  3953  0104  1FF1               	btfss	___awdiv@divisor+1,7
  3954  0105  2907               	goto	u84_21
  3955  0106  2908               	goto	u84_20
  3956  0107                     u84_21:
  3957  0107  290F               	goto	i1l1379
  3958  0108                     u84_20:
  3959  0108                     i1l1375:
  3960  0108  09F0               	comf	___awdiv@divisor,f
  3961  0109  09F1               	comf	___awdiv@divisor+1,f
  3962  010A  0AF0               	incf	___awdiv@divisor,f
  3963  010B  1903               	skipnz
  3964  010C  0AF1               	incf	___awdiv@divisor+1,f
  3965  010D                     i1l1377:
  3966  010D  01F6               	clrf	___awdiv@sign
  3967  010E  0AF6               	incf	___awdiv@sign,f
  3968  010F                     i1l1379:
  3969  010F  1FF3               	btfss	___awdiv@dividend+1,7
  3970  0110  2912               	goto	u85_21
  3971  0111  2913               	goto	u85_20
  3972  0112                     u85_21:
  3973  0112  291C               	goto	i1l1385
  3974  0113                     u85_20:
  3975  0113                     i1l1381:
  3976  0113  09F2               	comf	___awdiv@dividend,f
  3977  0114  09F3               	comf	___awdiv@dividend+1,f
  3978  0115  0AF2               	incf	___awdiv@dividend,f
  3979  0116  1903               	skipnz
  3980  0117  0AF3               	incf	___awdiv@dividend+1,f
  3981  0118                     i1l1383:
  3982  0118  3001               	movlw	1
  3983  0119  00F4               	movwf	??___awdiv
  3984  011A  0874               	movf	??___awdiv,w
  3985  011B  06F6               	xorwf	___awdiv@sign,f
  3986  011C                     i1l1385:
  3987  011C  01F7               	clrf	___awdiv@quotient
  3988  011D  01F8               	clrf	___awdiv@quotient+1
  3989  011E                     i1l1387:
  3990  011E  0870               	movf	___awdiv@divisor,w
  3991  011F  0471               	iorwf	___awdiv@divisor+1,w
  3992  0120  1903               	btfsc	3,2
  3993  0121  2923               	goto	u86_21
  3994  0122  2924               	goto	u86_20
  3995  0123                     u86_21:
  3996  0123  2953               	goto	i1l1407
  3997  0124                     u86_20:
  3998  0124                     i1l1389:
  3999  0124  01F5               	clrf	___awdiv@counter
  4000  0125  0AF5               	incf	___awdiv@counter,f
  4001  0126  2930               	goto	i1l1395
  4002  0127                     i1l1391:
  4003  0127  3001               	movlw	1
  4004  0128                     u87_25:
  4005  0128  35F0               	lslf	___awdiv@divisor,f
  4006  0129  0DF1               	rlf	___awdiv@divisor+1,f
  4007  012A  0B89               	decfsz	9,f
  4008  012B  2928               	goto	u87_25
  4009  012C                     i1l1393:
  4010  012C  3001               	movlw	1
  4011  012D  00F4               	movwf	??___awdiv
  4012  012E  0874               	movf	??___awdiv,w
  4013  012F  07F5               	addwf	___awdiv@counter,f
  4014  0130                     i1l1395:
  4015  0130  1FF1               	btfss	___awdiv@divisor+1,7
  4016  0131  2933               	goto	u88_21
  4017  0132  2934               	goto	u88_20
  4018  0133                     u88_21:
  4019  0133  2927               	goto	i1l1391
  4020  0134                     u88_20:
  4021  0134                     i1l1397:
  4022  0134  3001               	movlw	1
  4023  0135                     u89_25:
  4024  0135  35F7               	lslf	___awdiv@quotient,f
  4025  0136  0DF8               	rlf	___awdiv@quotient+1,f
  4026  0137  0B89               	decfsz	9,f
  4027  0138  2935               	goto	u89_25
  4028  0139  0871               	movf	___awdiv@divisor+1,w
  4029  013A  0273               	subwf	___awdiv@dividend+1,w
  4030  013B  1D03               	skipz
  4031  013C  293F               	goto	u90_25
  4032  013D  0870               	movf	___awdiv@divisor,w
  4033  013E  0272               	subwf	___awdiv@dividend,w
  4034  013F                     u90_25:
  4035  013F  1C03               	skipc
  4036  0140  2942               	goto	u90_21
  4037  0141  2943               	goto	u90_20
  4038  0142                     u90_21:
  4039  0142  2948               	goto	i1l1403
  4040  0143                     u90_20:
  4041  0143                     i1l1399:
  4042  0143  0870               	movf	___awdiv@divisor,w
  4043  0144  02F2               	subwf	___awdiv@dividend,f
  4044  0145  0871               	movf	___awdiv@divisor+1,w
  4045  0146  3BF3               	subwfb	___awdiv@dividend+1,f
  4046  0147                     i1l1401:
  4047  0147  1477               	bsf	___awdiv@quotient,0
  4048  0148                     i1l1403:
  4049  0148  3001               	movlw	1
  4050  0149                     u91_25:
  4051  0149  36F1               	lsrf	___awdiv@divisor+1,f
  4052  014A  0CF0               	rrf	___awdiv@divisor,f
  4053  014B  0B89               	decfsz	9,f
  4054  014C  2949               	goto	u91_25
  4055  014D                     i1l1405:
  4056  014D  3001               	movlw	1
  4057  014E  02F5               	subwf	___awdiv@counter,f
  4058  014F  1D03               	btfss	3,2
  4059  0150  2952               	goto	u92_21
  4060  0151  2953               	goto	u92_20
  4061  0152                     u92_21:
  4062  0152  2934               	goto	i1l1397
  4063  0153                     u92_20:
  4064  0153                     i1l1407:
  4065  0153  0876               	movf	___awdiv@sign,w
  4066  0154  1903               	btfsc	3,2
  4067  0155  2957               	goto	u93_21
  4068  0156  2958               	goto	u93_20
  4069  0157                     u93_21:
  4070  0157  295D               	goto	i1l1411
  4071  0158                     u93_20:
  4072  0158                     i1l1409:
  4073  0158  09F7               	comf	___awdiv@quotient,f
  4074  0159  09F8               	comf	___awdiv@quotient+1,f
  4075  015A  0AF7               	incf	___awdiv@quotient,f
  4076  015B  1903               	skipnz
  4077  015C  0AF8               	incf	___awdiv@quotient+1,f
  4078  015D                     i1l1411:
  4079  015D  0878               	movf	___awdiv@quotient+1,w
  4080  015E  00F1               	movwf	?___awdiv+1
  4081  015F  0877               	movf	___awdiv@quotient,w
  4082  0160  00F0               	movwf	?___awdiv
  4083  0161                     i1l516:
  4084  0161  0008               	return
  4085  0162                     __end_of___awdiv:
  4086                           
  4087                           	psect	text26
  4088  0616                     __ptext26:	
  4089 ;; *************** function _addChar *****************
  4090 ;; Defined at:
  4091 ;;		line 81 in file "display.c"
  4092 ;; Parameters:    Size  Location     Type
  4093 ;;  character       1    wreg     unsigned char 
  4094 ;; Auto vars:     Size  Location     Type
  4095 ;;  character       1   11[COMMON] unsigned char 
  4096 ;; Return value:  Size  Location     Type
  4097 ;;                  1    wreg      void 
  4098 ;; Registers used:
  4099 ;;		wreg, status,2, status,0, pclath, cstack
  4100 ;; Tracked objects:
  4101 ;;		On entry : 0/0
  4102 ;;		On exit  : 0/0
  4103 ;;		Unchanged: 0/0
  4104 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4105 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4106 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4107 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4108 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4109 ;;Total ram usage:        1 bytes
  4110 ;; Hardware stack levels used: 1
  4111 ;; Hardware stack levels required when called: 6
  4112 ;; This function calls:
  4113 ;;		_text
  4114 ;; This function is called by:
  4115 ;;		_displayTime
  4116 ;; This function uses a non-reentrant model
  4117 ;;
  4118                           
  4119                           
  4120                           ;psect for function _addChar
  4121  0616                     _addChar:
  4122                           
  4123                           ;incstack = 0
  4124 ;; hardware stack exceeded
  4125                           ; Regs used in _addChar: [wreg+status,2+status,0+pclath+cstack]
  4126                           ;addChar@character stored from wreg
  4127  0616  00FB               	movwf	addChar@character
  4128  0617                     i1l1503:
  4129                           
  4130                           ;display.c: 82:     text(character);
  4131  0617  087B               	movf	addChar@character,w
  4132  0618  3185  2576  3186   	fcall	_text
  4133  061B                     i1l191:
  4134  061B  0008               	return
  4135  061C                     __end_of_addChar:
  4136                           
  4137                           	psect	text27
  4138  0576                     __ptext27:	
  4139 ;; *************** function _text *****************
  4140 ;; Defined at:
  4141 ;;		line 129 in file "display.c"
  4142 ;; Parameters:    Size  Location     Type
  4143 ;;  txt             1    wreg     unsigned char 
  4144 ;; Auto vars:     Size  Location     Type
  4145 ;;  txt             1   10[COMMON] unsigned char 
  4146 ;; Return value:  Size  Location     Type
  4147 ;;                  1    wreg      void 
  4148 ;; Registers used:
  4149 ;;		wreg, status,2, status,0, pclath, cstack
  4150 ;; Tracked objects:
  4151 ;;		On entry : 0/0
  4152 ;;		On exit  : 0/0
  4153 ;;		Unchanged: 0/0
  4154 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4155 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4156 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4157 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4158 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4159 ;;Total ram usage:        2 bytes
  4160 ;; Hardware stack levels used: 1
  4161 ;; Hardware stack levels required when called: 5
  4162 ;; This function calls:
  4163 ;;		_setCursor
  4164 ;;		i1_writeFullByte
  4165 ;; This function is called by:
  4166 ;;		_addText
  4167 ;;		_addChar
  4168 ;; This function uses a non-reentrant model
  4169 ;;
  4170                           
  4171                           
  4172                           ;psect for function _text
  4173  0576                     _text:
  4174                           
  4175                           ;incstack = 0
  4176 ;; hardware stack exceeded
  4177                           ; Regs used in _text: [wreg+status,2+status,0+pclath+cstack]
  4178                           ;text@txt stored from wreg
  4179  0576  00FA               	movwf	text@txt
  4180  0577                     i1l1325:
  4181                           
  4182                           ;display.c: 132:     if (currentPos == 8)
  4183  0577  3008               	movlw	8
  4184  0578  0020               	movlb	0	; select bank0
  4185  0579  064B               	xorwf	_currentPos,w
  4186  057A  1D03               	btfss	3,2
  4187  057B  2D7D               	goto	u73_21
  4188  057C  2D7E               	goto	u73_20
  4189  057D                     u73_21:
  4190  057D  2D82               	goto	i1l209
  4191  057E                     u73_20:
  4192  057E                     i1l1327:
  4193                           
  4194                           ;display.c: 133:         setCursor(currentPos);
  4195  057E  084B               	movf	_currentPos,w
  4196  057F  3185  251E  3185   	fcall	_setCursor
  4197  0582                     i1l209:
  4198                           
  4199                           ;display.c: 135:     writeFullByte(txt, 1);
  4200  0582  01F3               	clrf	i1writeFullByte@mode
  4201  0583  0AF3               	incf	i1writeFullByte@mode,f
  4202  0584  087A               	movf	text@txt,w
  4203  0585  3185  25A4  3185   	fcall	i1_writeFullByte
  4204  0588                     i1l1329:
  4205                           
  4206                           ;display.c: 136:     currentPos += 1;
  4207  0588  3001               	movlw	1
  4208  0589  00F9               	movwf	??_text
  4209  058A  0879               	movf	??_text,w
  4210  058B  0020               	movlb	0	; select bank0
  4211  058C  07CB               	addwf	_currentPos,f
  4212  058D                     i1l210:
  4213  058D  0008               	return
  4214  058E                     __end_of_text:
  4215                           
  4216                           	psect	text28
  4217  051E                     __ptext28:	
  4218 ;; *************** function _setCursor *****************
  4219 ;; Defined at:
  4220 ;;		line 45 in file "display.c"
  4221 ;; Parameters:    Size  Location     Type
  4222 ;;  x               1    wreg     unsigned char 
  4223 ;; Auto vars:     Size  Location     Type
  4224 ;;  x               1    8[COMMON] unsigned char 
  4225 ;; Return value:  Size  Location     Type
  4226 ;;                  1    wreg      void 
  4227 ;; Registers used:
  4228 ;;		wreg, status,2, status,0, pclath, cstack
  4229 ;; Tracked objects:
  4230 ;;		On entry : 0/0
  4231 ;;		On exit  : 0/0
  4232 ;;		Unchanged: 0/0
  4233 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4234 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4235 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4236 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4237 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4238 ;;Total ram usage:        2 bytes
  4239 ;; Hardware stack levels used: 1
  4240 ;; Hardware stack levels required when called: 4
  4241 ;; This function calls:
  4242 ;;		i1_command
  4243 ;; This function is called by:
  4244 ;;		_displayTime
  4245 ;;		_text
  4246 ;; This function uses a non-reentrant model
  4247 ;;
  4248                           
  4249                           
  4250                           ;psect for function _setCursor
  4251  051E                     _setCursor:
  4252                           
  4253                           ;incstack = 0
  4254                           ; Regs used in _setCursor: [wreg+status,2+status,0+pclath+cstack]
  4255                           ;setCursor@x stored from wreg
  4256  051E  00F8               	movwf	setCursor@x
  4257  051F                     i1l1317:
  4258                           
  4259                           ;display.c: 46:     if (x > 16) x = 16 - 1;
  4260  051F  3011               	movlw	17
  4261  0520  0278               	subwf	setCursor@x,w
  4262  0521  1C03               	skipc
  4263  0522  2D24               	goto	u71_21
  4264  0523  2D25               	goto	u71_20
  4265  0524                     u71_21:
  4266  0524  2D29               	goto	i1l171
  4267  0525                     u71_20:
  4268  0525                     i1l1319:
  4269  0525  300F               	movlw	15
  4270  0526  00F7               	movwf	??_setCursor
  4271  0527  0877               	movf	??_setCursor,w
  4272  0528  00F8               	movwf	setCursor@x
  4273  0529                     i1l171:
  4274                           
  4275                           ;display.c: 48:     currentPos = x;
  4276  0529  0878               	movf	setCursor@x,w
  4277  052A  00F7               	movwf	??_setCursor
  4278  052B  0877               	movf	??_setCursor,w
  4279  052C  0020               	movlb	0	; select bank0
  4280  052D  00CB               	movwf	_currentPos
  4281                           
  4282                           ;display.c: 51:     if (x >= 8)
  4283  052E  3008               	movlw	8
  4284  052F  0278               	subwf	setCursor@x,w
  4285  0530  1C03               	skipc
  4286  0531  2D33               	goto	u72_21
  4287  0532  2D34               	goto	u72_20
  4288  0533                     u72_21:
  4289  0533  2D38               	goto	i1l1323
  4290  0534                     u72_20:
  4291  0534                     i1l1321:
  4292                           
  4293                           ;display.c: 52:         x += 0x40 - 8;
  4294  0534  3038               	movlw	56
  4295  0535  00F7               	movwf	??_setCursor
  4296  0536  0877               	movf	??_setCursor,w
  4297  0537  07F8               	addwf	setCursor@x,f
  4298  0538                     i1l1323:
  4299                           
  4300                           ;display.c: 54:     command(0x80 | x);
  4301  0538  0878               	movf	setCursor@x,w
  4302  0539  3880               	iorlw	128
  4303  053A  3186  260F  3185   	fcall	i1_command
  4304  053D                     i1l173:
  4305  053D  0008               	return
  4306  053E                     __end_of_setCursor:
  4307                           
  4308                           	psect	text29
  4309  060F                     __ptext29:	
  4310 ;; *************** function i1_command *****************
  4311 ;; Defined at:
  4312 ;;		line 125 in file "display.c"
  4313 ;; Parameters:    Size  Location     Type
  4314 ;;  cmd             1    wreg     unsigned char 
  4315 ;; Auto vars:     Size  Location     Type
  4316 ;;  cmd             1    6[COMMON] unsigned char 
  4317 ;; Return value:  Size  Location     Type
  4318 ;;                  1    wreg      void 
  4319 ;; Registers used:
  4320 ;;		wreg, status,2, status,0, pclath, cstack
  4321 ;; Tracked objects:
  4322 ;;		On entry : 0/0
  4323 ;;		On exit  : 0/0
  4324 ;;		Unchanged: 0/0
  4325 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4326 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4327 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4328 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4329 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4330 ;;Total ram usage:        1 bytes
  4331 ;; Hardware stack levels used: 1
  4332 ;; Hardware stack levels required when called: 3
  4333 ;; This function calls:
  4334 ;;		i1_writeFullByte
  4335 ;; This function is called by:
  4336 ;;		_setCursor
  4337 ;; This function uses a non-reentrant model
  4338 ;;
  4339                           
  4340                           
  4341                           ;psect for function i1_command
  4342  060F                     i1_command:
  4343                           
  4344                           ;incstack = 0
  4345                           ; Regs used in i1_command: [wreg+status,2+status,0+pclath+cstack]
  4346                           ;i1command@cmd stored from wreg
  4347  060F  00F6               	movwf	i1command@cmd
  4348  0610                     i1l1315:
  4349                           
  4350                           ;display.c: 126:     writeFullByte(cmd, 0);
  4351  0610  01F3               	clrf	i1writeFullByte@mode
  4352  0611  0876               	movf	i1command@cmd,w
  4353  0612  3185  25A4  3186   	fcall	i1_writeFullByte
  4354  0615                     i1l206:
  4355  0615  0008               	return
  4356  0616                     __end_ofi1_command:
  4357                           
  4358                           	psect	text30
  4359  05A4                     __ptext30:	
  4360 ;; *************** function i1_writeFullByte *****************
  4361 ;; Defined at:
  4362 ;;		line 118 in file "display.c"
  4363 ;; Parameters:    Size  Location     Type
  4364 ;;  data            1    wreg     unsigned char 
  4365 ;;  mode            1    3[COMMON] unsigned char 
  4366 ;; Auto vars:     Size  Location     Type
  4367 ;;  data            1    5[COMMON] unsigned char 
  4368 ;; Return value:  Size  Location     Type
  4369 ;;                  1    wreg      void 
  4370 ;; Registers used:
  4371 ;;		wreg, status,2, status,0, pclath, cstack
  4372 ;; Tracked objects:
  4373 ;;		On entry : 0/0
  4374 ;;		On exit  : 0/0
  4375 ;;		Unchanged: 0/0
  4376 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4377 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4378 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4379 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4380 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4381 ;;Total ram usage:        3 bytes
  4382 ;; Hardware stack levels used: 1
  4383 ;; Hardware stack levels required when called: 2
  4384 ;; This function calls:
  4385 ;;		i1_writeHalfByte
  4386 ;; This function is called by:
  4387 ;;		_text
  4388 ;;		i1_command
  4389 ;; This function uses a non-reentrant model
  4390 ;;
  4391                           
  4392                           
  4393                           ;psect for function i1_writeFullByte
  4394  05A4                     i1_writeFullByte:
  4395                           
  4396                           ;incstack = 0
  4397                           ; Regs used in i1_writeFullByte: [wreg+status,2+status,0+pclath+cstack]
  4398                           ;i1writeFullByte@data stored from wreg
  4399  05A4  00F5               	movwf	i1writeFullByte@data
  4400  05A5                     i1l1309:
  4401                           
  4402                           ;display.c: 119:     LATCbits.LATC7 = mode;
  4403  05A5  0C73               	rrf	i1writeFullByte@mode,w
  4404  05A6  0022               	movlb	2	; select bank2
  4405  05A7  1C03               	skipc
  4406  05A8  138E               	bcf	14,7	;volatile
  4407  05A9  1803               	skipnc
  4408  05AA  178E               	bsf	14,7	;volatile
  4409  05AB                     i1l1311:
  4410                           
  4411                           ;display.c: 121:     writeHalfByte(data >> 4);
  4412  05AB  0875               	movf	i1writeFullByte@data,w
  4413  05AC  00F4               	movwf	??i1_writeFullByte
  4414  05AD  3004               	movlw	4
  4415  05AE                     u70_25:
  4416  05AE  36F4               	lsrf	??i1_writeFullByte,f
  4417  05AF  0B89               	decfsz	9,f
  4418  05B0  2DAE               	goto	u70_25
  4419  05B1  0874               	movf	??i1_writeFullByte,w
  4420  05B2  3183  237B  3185   	fcall	i1_writeHalfByte
  4421  05B5                     i1l1313:
  4422                           
  4423                           ;display.c: 122:     writeHalfByte(data);
  4424  05B5  0875               	movf	i1writeFullByte@data,w
  4425  05B6  3183  237B  3185   	fcall	i1_writeHalfByte
  4426  05B9                     i1l203:
  4427  05B9  0008               	return
  4428  05BA                     __end_ofi1_writeFullByte:
  4429                           
  4430                           	psect	text31
  4431  037B                     __ptext31:	
  4432 ;; *************** function i1_writeHalfByte *****************
  4433 ;; Defined at:
  4434 ;;		line 107 in file "display.c"
  4435 ;; Parameters:    Size  Location     Type
  4436 ;;  data            1    wreg     unsigned char 
  4437 ;; Auto vars:     Size  Location     Type
  4438 ;;  data            1    2[COMMON] unsigned char 
  4439 ;; Return value:  Size  Location     Type
  4440 ;;                  1    wreg      void 
  4441 ;; Registers used:
  4442 ;;		wreg, status,2, status,0, pclath, cstack
  4443 ;; Tracked objects:
  4444 ;;		On entry : 0/0
  4445 ;;		On exit  : 0/0
  4446 ;;		Unchanged: 0/0
  4447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4448 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4449 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4450 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4451 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4452 ;;Total ram usage:        3 bytes
  4453 ;; Hardware stack levels used: 1
  4454 ;; Hardware stack levels required when called: 1
  4455 ;; This function calls:
  4456 ;;		i1_pulseEnable
  4457 ;; This function is called by:
  4458 ;;		i1_writeFullByte
  4459 ;; This function uses a non-reentrant model
  4460 ;;
  4461                           
  4462                           
  4463                           ;psect for function i1_writeHalfByte
  4464  037B                     i1_writeHalfByte:
  4465                           
  4466                           ;incstack = 0
  4467                           ; Regs used in i1_writeHalfByte: [wreg+status,2+status,0+pclath+cstack]
  4468                           ;i1writeHalfByte@data stored from wreg
  4469  037B  00F2               	movwf	i1writeHalfByte@data
  4470  037C                     i1l1305:
  4471                           
  4472                           ;display.c: 108:     LATCbits.LATC5 = (data >> 0) & 1;
  4473  037C  0872               	movf	i1writeHalfByte@data,w
  4474  037D  3901               	andlw	1
  4475  037E  00F0               	movwf	??i1_writeHalfByte
  4476  037F  0EF0               	swapf	??i1_writeHalfByte,f
  4477  0380  0DF0               	rlf	??i1_writeHalfByte,f
  4478  0381  0022               	movlb	2	; select bank2
  4479  0382  080E               	movf	14,w	;volatile
  4480  0383  0670               	xorwf	??i1_writeHalfByte,w
  4481  0384  39DF               	andlw	-33
  4482  0385  0670               	xorwf	??i1_writeHalfByte,w
  4483  0386  008E               	movwf	14	;volatile
  4484                           
  4485                           ;display.c: 109:     LATCbits.LATC4 = (data >> 1) & 1;
  4486  0387  3672               	lsrf	i1writeHalfByte@data,w
  4487  0388  3901               	andlw	1
  4488  0389  00F0               	movwf	??i1_writeHalfByte
  4489  038A  0EF0               	swapf	??i1_writeHalfByte,f
  4490  038B  080E               	movf	14,w	;volatile
  4491  038C  0670               	xorwf	??i1_writeHalfByte,w
  4492  038D  39EF               	andlw	-17
  4493  038E  0670               	xorwf	??i1_writeHalfByte,w
  4494  038F  008E               	movwf	14	;volatile
  4495                           
  4496                           ;display.c: 110:     LATCbits.LATC3 = (data >> 2) & 1;
  4497  0390  0872               	movf	i1writeHalfByte@data,w
  4498  0391  00F0               	movwf	??i1_writeHalfByte
  4499  0392  3002               	movlw	2
  4500  0393                     u68_25:
  4501  0393  36F0               	lsrf	??i1_writeHalfByte,f
  4502  0394  0B89               	decfsz	9,f
  4503  0395  2B93               	goto	u68_25
  4504  0396  0870               	movf	??i1_writeHalfByte,w
  4505  0397  3901               	andlw	1
  4506  0398  00F1               	movwf	??i1_writeHalfByte+1
  4507  0399  0DF1               	rlf	??i1_writeHalfByte+1,f
  4508  039A  0DF1               	rlf	??i1_writeHalfByte+1,f
  4509  039B  0DF1               	rlf	??i1_writeHalfByte+1,f
  4510  039C  080E               	movf	14,w	;volatile
  4511  039D  0671               	xorwf	??i1_writeHalfByte+1,w
  4512  039E  39F7               	andlw	-9
  4513  039F  0671               	xorwf	??i1_writeHalfByte+1,w
  4514  03A0  008E               	movwf	14	;volatile
  4515                           
  4516                           ;display.c: 111:     LATCbits.LATC6 = (data >> 3) & 1;
  4517  03A1  0872               	movf	i1writeHalfByte@data,w
  4518  03A2  00F0               	movwf	??i1_writeHalfByte
  4519  03A3  3003               	movlw	3
  4520  03A4                     u69_25:
  4521  03A4  36F0               	lsrf	??i1_writeHalfByte,f
  4522  03A5  0B89               	decfsz	9,f
  4523  03A6  2BA4               	goto	u69_25
  4524  03A7  0870               	movf	??i1_writeHalfByte,w
  4525  03A8  3901               	andlw	1
  4526  03A9  00F1               	movwf	??i1_writeHalfByte+1
  4527  03AA  0EF1               	swapf	??i1_writeHalfByte+1,f
  4528  03AB  0DF1               	rlf	??i1_writeHalfByte+1,f
  4529  03AC  0DF1               	rlf	??i1_writeHalfByte+1,f
  4530  03AD  080E               	movf	14,w	;volatile
  4531  03AE  0671               	xorwf	??i1_writeHalfByte+1,w
  4532  03AF  39BF               	andlw	-65
  4533  03B0  0671               	xorwf	??i1_writeHalfByte+1,w
  4534  03B1  008E               	movwf	14	;volatile
  4535  03B2                     i1l1307:
  4536                           
  4537                           ;display.c: 113:     pulseEnable();
  4538  03B2  3185  25EE  3183   	fcall	i1_pulseEnable
  4539  03B5                     i1l200:
  4540  03B5  0008               	return
  4541  03B6                     __end_ofi1_writeHalfByte:
  4542                           
  4543                           	psect	text32
  4544  05EE                     __ptext32:	
  4545 ;; *************** function i1_pulseEnable *****************
  4546 ;; Defined at:
  4547 ;;		line 141 in file "display.c"
  4548 ;; Parameters:    Size  Location     Type
  4549 ;;		None
  4550 ;; Auto vars:     Size  Location     Type
  4551 ;;		None
  4552 ;; Return value:  Size  Location     Type
  4553 ;;                  1    wreg      void 
  4554 ;; Registers used:
  4555 ;;		wreg
  4556 ;; Tracked objects:
  4557 ;;		On entry : 0/0
  4558 ;;		On exit  : 0/0
  4559 ;;		Unchanged: 0/0
  4560 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4561 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4562 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4563 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4564 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4565 ;;Total ram usage:        0 bytes
  4566 ;; Hardware stack levels used: 1
  4567 ;; This function calls:
  4568 ;;		Nothing
  4569 ;; This function is called by:
  4570 ;;		i1_writeHalfByte
  4571 ;; This function uses a non-reentrant model
  4572 ;;
  4573                           
  4574                           
  4575                           ;psect for function i1_pulseEnable
  4576  05EE                     i1_pulseEnable:
  4577  05EE                     i1l1301:	
  4578                           ;incstack = 0
  4579                           ; Regs used in i1_pulseEnable: [wreg]
  4580                           
  4581                           
  4582                           ;display.c: 142:     LATBbits.LATB7 = 0;
  4583  05EE  0022               	movlb	2	; select bank2
  4584  05EF  138D               	bcf	13,7	;volatile
  4585                           
  4586                           ;display.c: 143:     _delay((unsigned long)((1)*(16000000/4000000.0)));
  4587  05F0  3200               	nop2	;2 cycle nop
  4588  05F1  3200               	nop2	;2 cycle nop
  4589                           
  4590                           ;display.c: 144:     LATBbits.LATB7 = 1;
  4591  05F2  0022               	movlb	2	; select bank2
  4592  05F3  178D               	bsf	13,7	;volatile
  4593                           
  4594                           ;display.c: 145:     _delay((unsigned long)((1)*(16000000/4000000.0)));
  4595  05F4  3200               	nop2	;2 cycle nop
  4596  05F5  3200               	nop2	;2 cycle nop
  4597                           
  4598                           ;display.c: 146:     LATBbits.LATB7 = 0;
  4599  05F6  0022               	movlb	2	; select bank2
  4600  05F7  138D               	bcf	13,7	;volatile
  4601  05F8                     i1l1303:
  4602                           
  4603                           ;display.c: 147:     _delay((unsigned long)((100)*(16000000/4000000.0)));
  4604  05F8  3085               	movlw	133
  4605  05F9                     u148_27:
  4606  05F9  0B89               	decfsz	9,f
  4607  05FA  2DF9               	goto	u148_27
  4608  05FB  0000               	nop
  4609  05FC                     i1l213:
  4610  05FC  0008               	return
  4611  05FD                     __end_ofi1_pulseEnable:
  4612  007E                     btemp	set	126	;btemp
  4613  007E                     int$flags	set	126
  4614  007E                     wtemp0	set	126
  4615                           
  4616                           	psect	config
  4617                           
  4618                           ;Config register CONFIG1 @ 0x8007
  4619                           ;	Oscillator Selection
  4620                           ;	FOSC = INTOSC, INTOSC oscillator: I/O function on CLKIN pin
  4621                           ;	Watchdog Timer Enable
  4622                           ;	WDTE = OFF, WDT disabled
  4623                           ;	Power-up Timer Enable
  4624                           ;	PWRTE = OFF, PWRT disabled
  4625                           ;	MCLR Pin Function Select
  4626                           ;	MCLRE = OFF, MCLR/VPP pin function is digital input
  4627                           ;	Flash Program Memory Code Protection
  4628                           ;	CP = OFF, Program memory code protection is disabled
  4629                           ;	Data Memory Code Protection
  4630                           ;	CPD = OFF, Data memory code protection is disabled
  4631                           ;	Brown-out Reset Enable
  4632                           ;	BOREN = ON, Brown-out Reset enabled
  4633                           ;	Clock Out Enable
  4634                           ;	CLKOUTEN = OFF, CLKOUT function is disabled. I/O or oscillator function on the CLKOUT 
      +                          pin
  4635                           ;	Internal/External Switchover
  4636                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  4637                           ;	Fail-Safe Clock Monitor Enable
  4638                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  4639  8007                     	org	32775
  4640  8007  0FA4               	dw	4004
  4641                           
  4642                           ;Config register CONFIG2 @ 0x8008
  4643                           ;	Flash Memory Self-Write Protection
  4644                           ;	WRT = OFF, Write protection off
  4645                           ;	PLL Enable
  4646                           ;	PLLEN = OFF, 4x PLL disabled
  4647                           ;	Stack Overflow/Underflow Reset Enable
  4648                           ;	STVREN = OFF, Stack Overflow or Underflow will not cause a Reset
  4649                           ;	Brown-out Reset Voltage Selection
  4650                           ;	BORV = HI, Brown-out Reset Voltage (Vbor), high trip point selected.
  4651                           ;	Low-Voltage Programming Enable
  4652                           ;	LVP = OFF, High-voltage on MCLR/VPP must be used for programming
  4653  8008                     	org	32776
  4654  8008  18FF               	dw	6399

Data Sizes:
    Strings     0
    Constant    0
    Data        3
    BSS         12
    Persistent  32
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     35      50
    BANK1            80      5       5
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    addText@txt	PTR unsigned char  size(1) Largest target is 3
		 -> display2dgtChar@buf(BANK0[3]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr_routine in COMMON

    _displayTime->_getSeconds
    _getSeconds->___llmod
    _getMinutes->___lldiv
    _getHours->___lldiv
    _display2dgtChar->_addText
    _addText->_text
    _addChar->_text
    _text->_setCursor
    _setCursor->i1_command
    i1_command->i1_writeFullByte
    i1_writeFullByte->i1_writeHalfByte

Critical Paths under _main in BANK0

    _enable4BitMode->_writeHalfByte
    _command->_writeFullByte
    _writeFullByte->_writeHalfByte

Critical Paths under _isr_routine in BANK0

    _isr_routine->_everySecond
    _onStartBut->_updateDisplay
    _onSecBut->_updateDisplay
    _onReset->_updateDisplay
    _onMinBut->_updateDisplay
    _everySecond->_updateDisplay
    _updateDisplay->_displayTime
    _displayTime->_display2dgtChar

Critical Paths under _main in BANK1

    _main->_initDisplay
    _initDisplay->_clearDisplay
    _clearDisplay->_command
    _command->_writeFullByte

Critical Paths under _isr_routine in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr_routine in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr_routine in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr_routine in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr_routine in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr_routine in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr_routine in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr_routine in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr_routine in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr_routine in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr_routine in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr_routine in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     910
                        _initDisplay
 ---------------------------------------------------------------------------------
 (1) _initDisplay                                          2     2      0     910
                                              3 BANK1      2     2      0
                       _clearDisplay
                            _command
                     _enable4BitMode
                      _setPinOutputs
 ---------------------------------------------------------------------------------
 (2) _setPinOutputs                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _enable4BitMode                                       1     1      0     124
                                             33 BANK0      1     1      0
                      _writeHalfByte
 ---------------------------------------------------------------------------------
 (2) _clearDisplay                                         1     1      0     393
                                              2 BANK1      1     1      0
                            _command
 ---------------------------------------------------------------------------------
 (2) _command                                              1     1      0     393
                                              1 BANK1      1     1      0
                      _writeFullByte
 ---------------------------------------------------------------------------------
 (3) _writeFullByte                                        3     2      1     362
                                             33 BANK0      2     1      1
                                              0 BANK1      1     1      0
                      _writeHalfByte
 ---------------------------------------------------------------------------------
 (3) _writeHalfByte                                        3     3      0     124
                                             30 BANK0      3     3      0
                        _pulseEnable
 ---------------------------------------------------------------------------------
 (4) _pulseEnable                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _isr_routine                                          2     2      0   28535
                                             28 BANK0      2     2      0
                        _everySecond
                           _onMinBut
                            _onReset
                           _onSecBut
                         _onStartBut
 ---------------------------------------------------------------------------------
 (8) _onStartBut                                           2     2      0    5707
                                             24 BANK0      2     2      0
                      _updateDisplay
 ---------------------------------------------------------------------------------
 (8) _onSecBut                                             0     0      0    5707
                      _updateDisplay
 ---------------------------------------------------------------------------------
 (8) _onReset                                              0     0      0    5707
                      _updateDisplay
 ---------------------------------------------------------------------------------
 (8) _onMinBut                                             0     0      0    5707
                      _updateDisplay
 ---------------------------------------------------------------------------------
 (8) _everySecond                                          4     4      0    5707
                                             24 BANK0      4     4      0
                      _updateDisplay
 ---------------------------------------------------------------------------------
 (9) _updateDisplay                                        2     2      0    5707
                                             22 BANK0      2     2      0
                        _displayTime
 ---------------------------------------------------------------------------------
 (10) _displayTime                                        13     8      5    5707
                                              9 BANK0     13     8      5
                            _addChar
                    _display2dgtChar
                           _getHours
                         _getMinutes
                         _getSeconds
                          _setCursor
 ---------------------------------------------------------------------------------
 (11) _getSeconds                                          4     0      4     561
                                             10 COMMON     4     0      4
                            ___llmod
 ---------------------------------------------------------------------------------
 (11) _getMinutes                                          4     0      4    1050
                                              0 BANK0      4     0      4
                            ___lldiv
                            ___llmod
 ---------------------------------------------------------------------------------
 (12) ___llmod                                            10     2      8     463
                                              0 COMMON    10     2      8
 ---------------------------------------------------------------------------------
 (11) _getHours                                            4     0      4     610
                                              0 BANK0      4     0      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (12) ___lldiv                                            14     6      8     466
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (11) _display2dgtChar                                     9     9      0    1765
                                              0 BANK0      9     9      0
                            ___awdiv
                            ___awmod
                            _addText
 ---------------------------------------------------------------------------------
 (12) _addText                                             3     3      0     702
                                             11 COMMON     3     3      0
                               _text
 ---------------------------------------------------------------------------------
 (12) ___awmod                                             7     3      4     448
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (12) ___awdiv                                             9     5      4     452
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (11) _addChar                                             1     1      0     568
                                             11 COMMON     1     1      0
                               _text
 ---------------------------------------------------------------------------------
 (13) _text                                                2     2      0     546
                                              9 COMMON     2     2      0
                          _setCursor
                    i1_writeFullByte
 ---------------------------------------------------------------------------------
 (11) _setCursor                                           2     2      0     318
                                              7 COMMON     2     2      0
                          i1_command
 ---------------------------------------------------------------------------------
 (12) i1_command                                           1     1      0     228
                                              6 COMMON     1     1      0
                    i1_writeFullByte
 ---------------------------------------------------------------------------------
 (13) i1_writeFullByte                                     3     2      1     206
                                              3 COMMON     3     2      1
                    i1_writeHalfByte
 ---------------------------------------------------------------------------------
 (14) i1_writeHalfByte                                     3     3      0      88
                                              0 COMMON     3     3      0
                      i1_pulseEnable
 ---------------------------------------------------------------------------------
 (15) i1_pulseEnable                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initDisplay
     _clearDisplay
       _command
         _writeFullByte
           _writeHalfByte
             _pulseEnable
     _command
     _enable4BitMode
       _writeHalfByte
     _setPinOutputs

 _isr_routine (ROOT)
   _everySecond
     _updateDisplay
       _displayTime
         _addChar
           _text
             _setCursor
               i1_command
                 i1_writeFullByte
                   i1_writeHalfByte
                     i1_pulseEnable
             i1_writeFullByte
         _display2dgtChar
           ___awdiv
           ___awmod
           _addText
             _text
         _getHours
           ___lldiv
         _getMinutes
           ___lldiv
           ___llmod
         _getSeconds
           ___llmod
         _setCursor
   _onMinBut
     _updateDisplay
   _onReset
     _updateDisplay
   _onSecBut
     _updateDisplay
   _onStartBut
     _updateDisplay

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     23      32       5       62.5%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      5       5       7        6.2%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      45      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      45      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Sat Jan 15 19:44:31 2022

            ?_displayTime 0029                        l76 051B                        l77 051B  
            ___awdiv@sign 0076       displayTime@hasColon 002D                       l200 02A3  
                     l203 0575                       l213 05ED                       l206 0606  
                     l176 05DE                       l168 04D2                       l194 060E  
                     l197 04F8                       _PR2 001B        displayTime@seconds 0029  
            ___awmod@sign 0076                       wreg 0009                      l1801 04E0  
                    l1811 05DC                      l1803 04ED                      l1555 0607  
                    l1805 04F1                      l1813 04AD                      l1821 04F9  
                    l1807 05CF                      l1815 04B0                      l1831 0505  
                    l1823 04FC                      l1809 05D3                      l1817 04BD  
                    l1841 050B                      l1833 0506                      l1825 04FF  
                    l1819 04BF                      l1851 0517                      l1843 050E  
                    l1835 0507                      l1827 0501                      l1781 05DF  
                    l1853 0518                      l1845 0512                      l1837 0509  
                    l1829 0503                      l1783 05E9                      l1791 0564  
                    l1855 0519                      l1847 0514                      l1839 050A  
                    l1785 025C                      l1793 0570                      l1849 0515  
                    l1787 02A0                      l1795 05FF                      l1789 055D  
                    l1797 04D3                      l1799 04D7                      u1407 04E8  
                    u1417 04F2                      u1355 027A                      u1427 05D7  
                    u1437 05EA                      u1365 028F                      u1375 0569  
                    u1387 04B6                      u1397 04DB                      i1l50 0450  
                    i1l60 0334                      i1l53 03E8                      i1l54 03EA  
                    i1l47 05CE                      i1l71 0102                      i1l93 023B  
                    i1l88 037A                      i1l96 0259                      i1l99 05A3  
          ?_updateDisplay 0070                      _main 04F9                      _text 0576  
                    fsr1h 0007                      indf1 0001                      fsr1l 0006  
                    btemp 007E                      start 007D          addChar@character 007B  
            ?_initDisplay 0070     __end_ofi1_pulseEnable 05FD      __end_of_clearDisplay 05DF  
        ?_display2dgtChar 0070  __size_ofi1_writeHalfByte 003B              ?_everySecond 0070  
         __end_of_addChar 061C                     ?_main 0070           __end_of___awdiv 0162  
         __end_of___awmod 020F                     ?_text 0070           __end_of_addText 055B  
         __end_of___lldiv 01BC           ___awdiv@divisor 0070           __end_of___llmod 02EE  
                   i1l200 03B5                     i1l210 058D                     i1l106 03FE  
                   i1l203 05B9                     i1l124 04AC                     i1l116 047E  
                   i1l108 041E                     i1l132 004E                     i1l213 05FC  
                   i1l206 0615                     i1l134 0065                     i1l209 0582  
                   i1l137 007B                     i1l171 0529                     i1l173 053D  
                   i1l191 061B                     i1l516 0161                     i1l188 055A  
                   i1l529 020E                     i1l399 01BB                     i1l593 02ED  
         ___awdiv@counter 0075                     u70_25 05AE                     u71_20 0525  
                   u71_21 0524                     u72_20 0534                     u72_21 0533  
                   u80_25 0185                     u73_20 057E                     u81_20 019D  
                   u73_21 057D                     u81_21 019C                     u81_25 0199  
                   u90_20 0143                     u74_20 055A                     u90_21 0142  
                   u74_21 0559                     u90_25 013F                     u82_25 01A7  
                   u83_20 01B3                     u83_21 01B2                     u91_25 0149  
                   u92_20 0153                     u84_20 0108                     u92_21 0152  
                   u84_21 0107                     u68_25 0393                     u93_20 0158  
                   u85_20 0113                     u77_20 0172                     u93_21 0157  
                   u85_21 0112                     u77_21 0171                     u69_25 03A4  
                   u86_20 0124                     u94_20 01C1                     u86_21 0123  
                   u94_21 01C0                     u78_25 0176                     u95_20 01CC  
                   u79_20 0184                     u95_21 01CB                     u79_21 0183  
                   u87_25 0128                     u88_20 0134                     u96_20 01D7  
                   u88_21 0133                     u96_21 01D6                     u89_25 0135  
                   u97_25 01DB                     u98_20 01E7                     u98_21 01E6  
                   u99_20 01F1                     u99_21 01F0                     u99_25 01ED  
         __end_of_command 0607  __size_ofi1_writeFullByte 0016           __end_of_onReset 05A4  
                   status 0003                     wtemp0 007E     __end_of_setPinOutputs 060F  
         __initialization 007F        __size_ofi1_command 0007              __end_of_main 051E  
            __end_of_text 058E      display2dgtChar@F2598 004F                    ??_main 0043  
                  ??_text 0079              ?_isr_routine 0070      display2dgtChar@input 0027  
         ??_updateDisplay 0036          ___llmod@dividend 0074          ___awdiv@dividend 0072  
                  u100_25 01F6                    u101_20 0200                    u101_21 01FF  
                  u102_20 0205                    u110_20 0322                    u102_21 0204  
                  u110_21 0321                    i1l1301 05EE                    i1l1303 05F8  
                  i1l1311 05AB                    u103_20 02AC                    i1l1305 037C  
                  i1l1313 05B5                    i1l1321 0534                    i1l1401 0147  
                  u103_21 02AB                    i1l1307 03B2                    i1l1315 0610  
                  i1l1323 0538                    i1l1411 015D                    i1l1403 0148  
                  i1l1309 05A5                    i1l1317 051F                    i1l1325 0577  
                  i1l1405 014D                    i1l1421 01C6                    i1l1341 054F  
                  i1l1501 0330                    i1l1319 0525                    i1l1327 057E  
                  i1l1503 0617                    i1l1407 0153                    i1l1431 01DA  
                  i1l1423 01C8                    i1l1415 01BC                    i1l1335 053F  
                  i1l1351 0175                    i1l1511 009B                    u112_20 00D8  
                  u120_20 0457                    i1l1329 0588                    i1l1409 0158  
                  i1l1441 01F5                    i1l1433 01DF                    i1l1425 01CC  
                  i1l1417 01BD                    i1l1337 0541                    i1l1361 01A5  
                  i1l1353 0180                    i1l1521 00E1                    u112_21 00D7  
                  i1l1513 00CD                    i1l1601 059F                    u120_21 0456  
                  i1l1371 0103                    i1l1443 01FA                    i1l1435 01E3  
                  i1l1427 01D1                    i1l1419 01C1                    i1l1339 054B  
                  i1l1363 01A6                    i1l1355 0184                    i1l1347 0162  
                  i1l1531 00F9                    i1l1523 00E5                    i1l1515 00D2  
                  i1l1603 05A0                    i1l1611 0401                    i1l1381 0113  
                  i1l1373 0104                    i1l1437 01E7                    i1l1429 01D7  
                  i1l1445 0200                    i1l1365 01AD                    i1l1357 018B  
                  i1l1349 0172                    i1l1461 02BE                    u104_25 02B0  
                  i1l1453 02A4                    i1l1533 00FD                    i1l1525 00EA  
                  i1l1517 00D8                    i1l1541 0344                    i1l1605 03EB  
                  i1l1701 001F                    i1l1391 0127                    i1l1383 0118  
                  i1l1375 0108                    i1l1447 0205                    i1l1439 01F1  
                  i1l1359 019D                    i1l1367 01B3                    i1l1463 02D0  
                  i1l1455 02AC                    i1l1527 00F0                    i1l1519 00DD  
                  i1l1543 0355                    i1l1631 0466                    i1l1607 03EC  
                  i1l1615 0403                    i1l1703 0023                    i1l1711 0036  
                  u105_20 02BE                    u113_20 00F0                    u121_20 0466  
                  i1l1393 012C                    i1l1385 011C                    i1l1377 010D  
                  i1l1449 020A                    i1l1481 03B6                    i1l1465 02D8  
                  u105_21 02BD                    i1l1457 02AF                    i1l1473 05BA  
                  i1l1529 00F5                    u113_21 00EF                    i1l1537 0335  
                  i1l1641 0485                    i1l1633 046B                    u121_21 0465  
                  i1l1625 0451                    i1l1609 03F9                    i1l1617 041A  
                  i1l1721 0055                    i1l1713 003B                    i1l1705 0030  
                  i1l1395 0130                    i1l1387 011E                    i1l1379 010F  
                  i1l1491 02F6                    i1l1483 03D3                    i1l1467 02DF  
                  i1l1459 02BA                    i1l1539 0336                    i1l1651 04A9  
                  i1l1643 048E                    i1l1635 0473                    i1l1627 0457  
                  i1l1619 041B                    i1l1723 0062                    i1l1715 003E  
                  i1l1707 0032                    i1l1397 0134                    i1l1389 0124  
                  i1l1493 0309                    i1l1485 03DF                    i1l1469 02E5  
                  i1l1477 041F                    i1l1549 0363                    i1l1581 020F  
                  i1l1645 0494                    i1l1637 047B                    i1l1629 0460  
                  i1l1725 0069                    i1l1717 004B                    i1l1709 0033  
                  i1l1399 0143                    i1l1495 0322                    i1l1591 0247  
                  i1l1583 021A                    i1l1647 0499                    i1l1639 047F  
                  i1l1727 006C                    i1l1719 0052                    u106_20 02D0  
                  u114_20 021A                    u122_20 046B                    u130_20 001F  
                  i1l1497 0326                    i1l1489 02F0                    u106_21 02CF  
                  i1l1585 0222                    i1l1593 0248                    u114_21 0219  
                  i1l1649 04A1                    u122_21 046A                    i1l1729 0079  
                  u130_21 001E                    i1l1499 032B                    i1l1595 024E  
                  i1l1587 022B                    i1l1907 040C                    i1l1691 000B  
                  u106_25 02CC                    i1l1909 036C                    i1l1597 0256  
                  i1l1589 0243                    i1l1693 000C                    i1l1599 058E  
                  i1l1695 0016                    u115_20 0222                    u123_20 0473  
                  u131_20 0023                    u115_21 0221                    u123_21 0472  
                  u131_21 0022                    i1l1697 0017                    i1l1689 0006  
                  i1l1699 001A                    u107_25 02D9                    u108_20 02E5  
                  u116_20 0243                    u124_20 0485                    u132_20 003B  
                  u108_21 02E4                    u116_21 0242                    u124_21 0484  
                  u132_21 003A                    u109_20 03DF                    u117_20 024E  
                  u125_20 0494                    u133_20 0052                    u109_21 03DE  
                  u117_21 024D                    u125_21 0493                    u133_21 0051  
                  u118_20 0254                    u126_20 0499                    u134_20 0069  
                  u118_21 0251                    u126_21 0498                    u134_21 0068  
                  u127_20 04A1                    u127_21 04A0                    u119_24 0256  
                  u128_20 000B                    u128_21 000A                    u144_27 0029  
                  u129_20 0016                    u129_21 0015                    u145_27 0044  
                  u146_27 005B                    u147_27 0072                    u148_27 05F9  
                  _OSCCON 0099          __end_of_getHours 03EB         _configuredSeconds 0047  
               ??_addChar 007B                 ??___awdiv 0074                 ??___awmod 0074  
               ??_addText 007B                 ??___lldiv 0078          __end_of_onMinBut 04AD  
               ??___llmod 0078          __end_of_onSecBut 047F          ___awdiv@quotient 0077  
         ___awmod@divisor 0070           ___awmod@counter 0075      __size_of_displayTime 0068  
               ??_command 0043                 ??_onReset 007E   __size_of_enable4BitMode 0026  
  __size_of_writeHalfByte 004A         ??i1_writeHalfByte 0070         __end_ofi1_command 0616  
 __end_of__initialization 0097    __size_of_writeFullByte 001B         ??i1_writeFullByte 0074  
   __size_of_clearDisplay 0010              ?_pulseEnable 0070            __pcstackCOMMON 0070  
            __pidataBANK0 061C      __size_of_initDisplay 0026              i1command@cmd 0076  
         getHours@seconds 0020       i1writeHalfByte@data 0072      __size_of_everySecond 004B  
            _clearDisplay 05CF                __pbssBANK0 0043                addText@txt 007D  
           _writeHalfByte 025A                __pmaintext 04F9        __size_of_setCursor 0020  
              __pintentry 0004                _getMinutes 041F                _getSeconds 05BA  
           _writeFullByte 055B      __size_of_isr_routine 0079                 ?_getHours 0020  
               ?_onMinBut 0070                 ?_onSecBut 0070            ?_writeHalfByte 0070  
                 _addChar 0616                   ___awdiv 0103                   ___awmod 01BC  
                 _addText 053E                   ___lldiv 0162                   ___llmod 02A4  
          ?_writeFullByte 0041                _currentPos 004B                   __ptext1 04AD  
                 __ptext2 0607                   __ptext3 04D3                   __ptext4 05CF  
                 __ptext5 05FD                   __ptext6 055B                   __ptext7 025A  
                 __ptext8 05DF                _onStartBut 03EB                   _command 05FD  
               _T2CONbits 001C                   _onReset 058E  __size_of_display2dgtChar 0047  
        ___awmod@dividend 0072            _enable4BitMode 04D3                 _IOCBFbits 0396  
               _IOCBPbits 0394                ??_getHours 007E            displayTime@min 0034  
          displayTime@hrs 0035            displayTime@sec 0033    __size_ofi1_pulseEnable 000F  
    end_of_initialization 0097         __end_of_setCursor 053E                ??_onMinBut 007E  
              ??_onSecBut 007E           ___lldiv@divisor 0070           ___lldiv@counter 007D  
                 text@txt 007A      __size_of_pulseEnable 000F           i1_writeHalfByte 037B  
             ?_getMinutes 0020               ?_getSeconds 007A                 _PORTBbits 000D  
  __end_of_enable4BitMode 04F9    __size_of_setPinOutputs 0008           i1_writeFullByte 05A4  
               _TRISBbits 008D                 _TRISCbits 008E             addText@txtPtr 007C  
   __end_of_updateDisplay 037B         writeFullByte@data 00A0         writeFullByte@mode 0041  
              command@cmd 00A1                 i1_command 060F           ??_writeHalfByte 003E  
           i1_pulseEnable 05EE           ??_writeFullByte 0042             ??_displayTime 002E  
             ?_onStartBut 0070             _secondCounter 004D           ?_enable4BitMode 0070  
     start_initialization 007F         ??_display2dgtChar 0020         getMinutes@seconds 0020  
              ?i1_command 0070       __size_of_getMinutes 0032       __size_of_getSeconds 0015  
         ___llmod@divisor 0070           ___llmod@counter 0079             _setPinOutputs 0607  
 __end_ofi1_writeHalfByte 03B6             ??_initDisplay 00A3            ?i1_pulseEnable 0070  
       getSeconds@seconds 007A            _currentSeconds 0043               __pdataBANK0 004F  
 __end_ofi1_writeFullByte 05BA             ??_everySecond 0038       __end_of_displayTime 0103  
               ___latbits 0002             __pcstackBANK0 0020             __pcstackBANK1 00A0  
       __size_of_getHours 0035         __size_of_onMinBut 002E       __size_of_onStartBut 0034  
          ?_setPinOutputs 0070         __size_of_onSecBut 002E                  ?_addChar 0070  
                ?___awdiv 0070                  ?___awmod 0070                  ?___lldiv 0070  
                ?_addText 0070                  ?___llmod 0070                setCursor@x 0078  
     __end_of_initDisplay 04D3             ??_isr_routine 003C                  ?_command 0070  
                ?_onReset 0070       __end_of_everySecond 025A               ??i1_command 0076  
                _LATBbits 010D                  _LATCbits 010E                 _setCursor 051E  
                _PIE1bits 0091           ??i1_pulseEnable 0070          ?i1_writeHalfByte 0070  
                _PIR1bits 0011               _displayTime 009B              ??_getMinutes 007E  
            ??_getSeconds 007E          ?i1_writeFullByte 0073       __end_of_isr_routine 007D  
         ??_setPinOutputs 003E                ?_setCursor 0070        __end_of_getMinutes 0451  
      __end_of_getSeconds 05CF        display2dgtChar@buf 0023        display2dgtChar@lsd 0026  
      display2dgtChar@msd 0028             ??_pulseEnable 003E               _initDisplay 04AD  
        ??_enable4BitMode 0041          __size_of_addChar 0006          __size_of___awdiv 005F  
        __size_of___awmod 0053          __size_of_addText 001D          __size_of___lldiv 005A  
        __size_of___llmod 004A              ??_onStartBut 0038               _everySecond 020F  
              _ANSELBbits 018D           _display2dgtChar 02EE          __size_of_command 000A  
             _currentMode 004C          __size_of_onReset 0016                  _getHours 03B6  
           ?_clearDisplay 0070                  __ptext10 03EB                  __ptext11 0451  
                __ptext20 03B6                  __ptext12 058E                  __ptext21 0162  
                __ptext13 047F                  __ptext30 05A4                  __ptext22 02EE  
                __ptext14 020F                  __ptext31 037B                  __ptext23 053E  
                __ptext15 0335                  __ptext32 05EE                  __ptext24 01BC  
                __ptext16 009B                  __ptext25 0103                  __ptext17 05BA  
                __ptext26 0616                  __ptext18 041F                  __ptext27 0576  
                __ptext19 02A4                  __ptext28 051E                  __ptext29 060F  
                _onMinBut 047F                  _onSecBut 0451             __size_of_main 0025  
           __size_of_text 0018     __end_of_writeHalfByte 02A4        __end_of_onStartBut 041F  
                int$flags 007E     __end_of_writeFullByte 0576       i1writeFullByte@data 0075  
     i1writeFullByte@mode 0073       __end_of_pulseEnable 05EE    __size_of_updateDisplay 0046  
         _displayTime$302 002F           _displayTime$303 0031               _isr_routine 0004  
              _INTCONbits 000B            ??_clearDisplay 00A2                  intlevel1 0000  
            _timerCounter 004E          ___lldiv@dividend 0074         writeHalfByte@data 0040  
             ??_setCursor 0077   __end_of_display2dgtChar 0335          ___lldiv@quotient 0079  
           _updateDisplay 0335               _pulseEnable 05DF  
